{"map":"{\"version\":3,\"sources\":[\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/App.tsx\",\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/index.tsx\"],\"names\":[\"App\",\"game\",\"setGame\",\"useState\",\"gameId\",\"board\",\"Array\",\"fill\",\"map\",\"currentPlayer\",\"status\",\"createdAt\",\"updatedAt\",\"selectedSquare\",\"setSelectedSquare\",\"validMoves\",\"setValidMoves\",\"apiEndpoint\",\"calculateValidMoves\",\"row\",\"col\",\"piece\",\"console\",\"log\",\"isKing\",\"toUpperCase\",\"moves\",\"directions\",\"toLowerCase\",\"push\",\"includes\",\"jumps\",\"rowDir\",\"colDir\",\"_game$board$jumpedRow\",\"_game$board$newRow\",\"jumpedRow\",\"jumpedCol\",\"newRow\",\"newCol\",\"from\",\"over\",\"to\",\"jumpedPiece\",\"isOpponentPiece\",\"isBlackSquare\",\"length\",\"sum\",\"React\",\"createElement\",\"className\",\"style\",\"padding\",\"textAlign\",\"fontSize\",\"marginBottom\",\"fontWeight\",\"color\",\"getGameStatus\",\"concat\",\"_game$winner\",\"winner\",\"display\",\"border\",\"backgroundColor\",\"rowIndex\",\"key\",\"colIndex\",\"isSelected\",\"isValidMove\",\"some\",\"move\",\"onClick\",\"async\",\"_game$board\",\"_game$board$row\",\"alert\",\"isValidDestination\",\"targetSquare\",\"moveData\",\"fromRow\",\"fromCol\",\"toRow\",\"toCol\",\"response\",\"fetch\",\"method\",\"headers\",\"Content-Type\",\"Accept\",\"mode\",\"body\",\"JSON\",\"stringify\",\"ok\",\"errorData\",\"json\",\"error\",\"statusText\",\"Error\",\"updatedGame\",\"hasMoreJumps\",\"message\",\"handleSquareClick\",\"width\",\"height\",\"justifyContent\",\"alignItems\",\"cursor\",\"position\",\"boxSizing\",\"borderRadius\",\"boxShadow\",\"top\",\"left\",\"transform\",\"marginTop\",\"data\",\"newGame\",\"parse\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\n\\ninterface GameState {\\n  gameId: string;\\n  board: string[][];\\n  currentPlayer: 'red' | 'black';\\n  status: 'active' | 'finished';\\n  winner?: string;\\n  createdAt: string;\\n  updatedAt: string;\\n  hasMoreJumps?: boolean;\\n}\\n\\ninterface Square {\\n  row: number;\\n  col: number;\\n  piece: string;\\n}\\n\\ninterface Move {\\n  row: number;\\n  col: number;\\n}\\n\\nfunction App() {\\n  const [game, setGame] = useState<GameState>({\\n    gameId: '',\\n    board: Array(8).fill(null).map(() => Array(8).fill('')),\\n    currentPlayer: 'red',\\n    status: 'active',\\n    createdAt: '',\\n    updatedAt: ''\\n  });\\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\\n  const apiEndpoint = 'https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod';\\n\\n  const getGameStatus = () => {\\n    if (!game.gameId) {\\n      return \\\"Click 'New Game' to start playing!\\\";\\n    }\\n    if (game.status === 'finished') {\\n      return `Game Over! ${game.winner?.toUpperCase()} wins! ðŸŽ‰`;\\n    }\\n    return `Current Turn: ${game.currentPlayer.toUpperCase()}`;\\n  };\\n\\n  const createNewGame = async () => {\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors'\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to create game');\\n      }\\n\\n      const data = await response.json();\\n      console.log('API Response:', data);\\n      \\n      if (typeof data === 'string') {\\n        const newGame = JSON.parse(data);\\n        console.log('Parsed new game state:', newGame);\\n        setGame(newGame);\\n      } else {\\n        console.log('Setting game state directly:', data);\\n        setGame(data);\\n      }\\n      \\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error creating game:', error);\\n      alert('Failed to create new game. Please try again.');\\n    }\\n  };\\n\\n  const calculateValidMoves = (row: number, col: number): Move[] => {\\n    const piece = game.board[row][col];\\n    console.log('Calculating moves for piece:', {\\n      row,\\n      col,\\n      piece,\\n      isKing: piece === piece.toUpperCase()\\n    });\\n    \\n    if (!piece) return [];\\n\\n    const isKing = piece === piece.toUpperCase();\\n    const moves: Move[] = [];\\n\\n    // Determine valid directions based on piece type and color\\n    const directions: number[] = [];\\n    if (piece.toLowerCase() === 'r') {\\n      directions.push(-1); // Red pieces move up\\n    } else if (piece.toLowerCase() === 'b') {\\n      directions.push(1);  // Black pieces move down\\n    }\\n    if (isKing) {\\n      // Kings can move both up and down\\n      if (!directions.includes(-1)) directions.push(-1);\\n      if (!directions.includes(1)) directions.push(1);\\n    }\\n\\n    console.log('Movement directions:', directions);\\n\\n    // First check for jumps (these are mandatory)\\n    const jumps: Move[] = [];\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const jumpedRow = row + rowDir;\\n        const jumpedCol = col + colDir;\\n        const newRow = row + (rowDir * 2);\\n        const newCol = col + (colDir * 2);\\n\\n        console.log('Checking jump:', {\\n          from: { row, col },\\n          over: { row: jumpedRow, col: jumpedCol, piece: game.board[jumpedRow]?.[jumpedCol] },\\n          to: { row: newRow, col: newCol, piece: game.board[newRow]?.[newCol] }\\n        });\\n\\n        // Check if jump is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Jump out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if there's an opponent's piece to jump over\\n        const jumpedPiece = game.board[jumpedRow][jumpedCol];\\n        if (!jumpedPiece) {\\n          console.log('No piece to jump over');\\n          continue;\\n        }\\n        \\n        // Check if landing square is empty\\n        if (game.board[newRow][newCol]) {\\n          console.log('Landing square occupied');\\n          continue;\\n        }\\n        \\n        const isOpponentPiece = \\n          (piece.toLowerCase() === 'r' && jumpedPiece.toLowerCase() === 'b') ||\\n          (piece.toLowerCase() === 'b' && jumpedPiece.toLowerCase() === 'r');\\n\\n        console.log('Jump validation:', {\\n          isOpponentPiece,\\n          isBlackSquare: (newRow + newCol) % 2 === 1\\n        });\\n\\n        // Only allow jumps over opponent's pieces to black squares\\n        if (isOpponentPiece && (newRow + newCol) % 2 === 1) {\\n          jumps.push({ row: newRow, col: newCol });\\n          console.log('Valid jump found:', { row: newRow, col: newCol });\\n        }\\n      }\\n    }\\n\\n    // If there are jumps available, they are mandatory\\n    if (jumps.length > 0) {\\n      console.log('Mandatory jumps found:', jumps);\\n      return jumps;\\n    }\\n\\n    // If no jumps are available, check for regular moves\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const newRow = row + rowDir;\\n        const newCol = col + colDir;\\n\\n        console.log('Checking regular move:', {\\n          from: { row, col },\\n          to: { row: newRow, col: newCol },\\n          isBlackSquare: (newRow + newCol) % 2 === 1\\n        });\\n\\n        // Check if move is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Move out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if destination square is empty\\n        if (game.board[newRow][newCol]) {\\n          console.log('Destination square occupied');\\n          continue;\\n        }\\n\\n        // Only allow moves to black squares\\n        const isBlackSquare = (newRow + newCol) % 2 === 1;\\n        console.log('Square color check:', {\\n          newRow,\\n          newCol,\\n          sum: newRow + newCol,\\n          isBlackSquare\\n        });\\n\\n        if (isBlackSquare) {\\n          moves.push({ row: newRow, col: newCol });\\n          console.log('Valid move found:', { row: newRow, col: newCol });\\n        } else {\\n          console.log('Not a black square');\\n        }\\n      }\\n    }\\n\\n    console.log('Final valid moves:', moves);\\n    return moves;\\n  };\\n\\n  const handleSquareClick = async (row: number, col: number) => {\\n    if (!game.gameId || game.status === 'finished') return;\\n    \\n    const piece = game.board?.[row]?.[col];\\n    console.log('Clicked square:', {row, col, piece});\\n    console.log('Game state:', {\\n      currentPlayer: game.currentPlayer,\\n      selectedSquare,\\n      validMoves\\n    });\\n\\n    // First click - selecting a piece\\n    if (!selectedSquare) {\\n      if (!piece) {\\n        console.log('Clicked empty square');\\n        return;\\n      }\\n\\n      const isCurrentPlayersPiece = \\n        (game.currentPlayer === 'red' && piece.toLowerCase() === 'r') ||\\n        (game.currentPlayer === 'black' && piece.toLowerCase() === 'b');\\n\\n      if (!isCurrentPlayersPiece) {\\n        alert(\\\"You can only move your own pieces!\\\");\\n        return;\\n      }\\n\\n      const moves = calculateValidMoves(row, col);\\n      console.log('Calculated valid moves:', moves);\\n      \\n      if (moves.length === 0) {\\n        alert(\\\"This piece has no valid moves!\\\");\\n        return;\\n      }\\n\\n      setSelectedSquare({ row, col, piece });\\n      setValidMoves(moves);\\n      return;\\n    }\\n\\n    // Second click - making a move\\n    if (selectedSquare.row === row && selectedSquare.col === col) {\\n      console.log('Deselecting piece');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    // Check if this is a valid move\\n    const isValidDestination = validMoves.some(move => move.row === row && move.col === col);\\n    console.log('Move validation:', {\\n      isValidDestination,\\n      selectedSquare,\\n      targetSquare: {row, col}\\n    });\\n\\n    if (!isValidDestination) {\\n      console.log('Invalid move - not in valid moves list');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    try {\\n      const moveData = {\\n        fromRow: selectedSquare.row,\\n        fromCol: selectedSquare.col,\\n        toRow: row,\\n        toCol: col\\n      };\\n      console.log('Sending move to API:', moveData);\\n\\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\\n        method: 'PUT',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors',\\n        body: JSON.stringify(moveData)\\n      });\\n\\n      if (!response.ok) {\\n        const errorData = await response.json();\\n        console.error('API Error:', {\\n          status: response.status,\\n          statusText: response.statusText,\\n          errorData\\n        });\\n        throw new Error(errorData.error || 'Invalid move');\\n      }\\n\\n      const updatedGame = await response.json();\\n      console.log('Move successful:', updatedGame);\\n      \\n      setGame(updatedGame);\\n      \\n      // Only clear selection if there are no more jumps available\\n      if (!updatedGame.hasMoreJumps) {\\n        setSelectedSquare(null);\\n        setValidMoves([]);\\n      } else {\\n        // Update selected square to new position for next jump\\n        setSelectedSquare({\\n          row,\\n          col,\\n          piece: updatedGame.board[row][col]\\n        });\\n        // Calculate new valid moves from the new position\\n        setValidMoves(calculateValidMoves(row, col));\\n      }\\n    } catch (error) {\\n      console.error('Error making move:', error);\\n      alert(error instanceof Error ? error.message : 'Invalid move. Please try again.');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\" style={{ padding: '20px', textAlign: 'center' }}>\\n      <h1>Checkers Game</h1>\\n      <div className=\\\"game-status\\\" style={{ \\n        fontSize: '1.5em', \\n        marginBottom: '20px',\\n        fontWeight: 'bold',\\n        color: game.status === 'finished' ? '#4CAF50' : '#2196F3'\\n      }}>\\n        {getGameStatus()}\\n      </div>\\n      <div className=\\\"game-board\\\" style={{\\n        display: 'inline-block',\\n        border: '2px solid #333',\\n        backgroundColor: '#fff'\\n      }}>\\n        {game.board.map((row, rowIndex) => (\\n          <div key={rowIndex} className=\\\"board-row\\\" style={{\\n            display: 'flex'\\n          }}>\\n            {row.map((piece, colIndex) => {\\n              const isBlackSquare = (rowIndex + colIndex) % 2 === 1;\\n              const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\\n              const isValidMove = validMoves.some(move => move.row === rowIndex && move.col === colIndex);\\n              \\n              return (\\n                <div\\n                  key={colIndex}\\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\\n                  style={{\\n                    width: '60px',\\n                    height: '60px',\\n                    backgroundColor: isBlackSquare ? '#666' : '#fff',\\n                    border: isSelected ? '3px solid yellow' : '1px solid #999',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center',\\n                    cursor: 'pointer',\\n                    position: 'relative',\\n                    boxSizing: 'border-box'\\n                  }}\\n                >\\n                  {piece && (\\n                    <div style={{\\n                      width: '80%',\\n                      height: '80%',\\n                      borderRadius: '50%',\\n                      backgroundColor: piece.toLowerCase() === 'r' ? '#ff4444' : '#333',\\n                      border: '2px solid #fff',\\n                      boxShadow: '0 0 10px rgba(0,0,0,0.3)',\\n                      position: 'relative'\\n                    }}>\\n                      {piece === piece.toUpperCase() && (\\n                        <div style={{\\n                          position: 'absolute',\\n                          top: '50%',\\n                          left: '50%',\\n                          transform: 'translate(-50%, -50%)',\\n                          color: piece.toLowerCase() === 'r' ? '#ffcccc' : '#666',\\n                          fontSize: '24px'\\n                        }}>\\n                          â™”\\n                        </div>\\n                      )}\\n                    </div>\\n                  )}\\n                  {isValidMove && (\\n                    <div style={{\\n                      position: 'absolute',\\n                      width: '20px',\\n                      height: '20px',\\n                      borderRadius: '50%',\\n                      backgroundColor: 'rgba(0, 255, 0, 0.5)',\\n                      border: '2px solid rgba(0, 255, 0, 0.8)'\\n                    }} />\\n                  )}\\n                </div>\\n              );\\n            })}\\n          </div>\\n        ))}\\n      </div>\\n      <div style={{ marginTop: '20px' }}>\\n        <button \\n          onClick={createNewGame}\\n          style={{\\n            padding: '10px 20px',\\n            fontSize: '16px',\\n            backgroundColor: '#4CAF50',\\n            color: 'white',\\n            border: 'none',\\n            borderRadius: '4px',\\n            cursor: 'pointer',\\n            marginBottom: '20px'\\n          }}\\n        >\\n          {game.status === 'finished' ? 'Play Again' : game.gameId ? 'Restart Game' : 'New Game'}\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(o,e,t){\"use strict\";t.r(e);var r=t(0),a=t.n(r),n=t(2);var l=function(){const[o,e]=Object(r.useState)({gameId:\"\",board:Array(8).fill(null).map(()=>Array(8).fill(\"\")),currentPlayer:\"red\",status:\"active\",createdAt:\"\",updatedAt:\"\"}),[t,n]=Object(r.useState)(null),[l,s]=Object(r.useState)([]),c=\"https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod\",i=(e,t)=>{const r=o.board[e][t];if(console.log(\"Calculating moves for piece:\",{row:e,col:t,piece:r,isKing:r===r.toUpperCase()}),!r)return[];const a=r===r.toUpperCase(),n=[],l=[];\"r\"===r.toLowerCase()?l.push(-1):\"b\"===r.toLowerCase()&&l.push(1),a&&(l.includes(-1)||l.push(-1),l.includes(1)||l.push(1)),console.log(\"Movement directions:\",l);const s=[];for(const d of l)for(const a of[-1,1]){var c,i;const n=e+d,l=t+a,u=e+2*d,p=t+2*a;if(console.log(\"Checking jump:\",{from:{row:e,col:t},over:{row:n,col:l,piece:null===(c=o.board[n])||void 0===c?void 0:c[l]},to:{row:u,col:p,piece:null===(i=o.board[u])||void 0===i?void 0:i[p]}}),u<0||u>7||p<0||p>7){console.log(\"Jump out of bounds\");continue}const m=o.board[n][l];if(!m){console.log(\"No piece to jump over\");continue}if(o.board[u][p]){console.log(\"Landing square occupied\");continue}const g=\"r\"===r.toLowerCase()&&\"b\"===m.toLowerCase()||\"b\"===r.toLowerCase()&&\"r\"===m.toLowerCase();console.log(\"Jump validation:\",{isOpponentPiece:g,isBlackSquare:(u+p)%2===1}),g&&(u+p)%2===1&&(s.push({row:u,col:p}),console.log(\"Valid jump found:\",{row:u,col:p}))}if(s.length>0)return console.log(\"Mandatory jumps found:\",s),s;for(const d of l)for(const r of[-1,1]){const a=e+d,l=t+r;if(console.log(\"Checking regular move:\",{from:{row:e,col:t},to:{row:a,col:l},isBlackSquare:(a+l)%2===1}),a<0||a>7||l<0||l>7){console.log(\"Move out of bounds\");continue}if(o.board[a][l]){console.log(\"Destination square occupied\");continue}const s=(a+l)%2===1;console.log(\"Square color check:\",{newRow:a,newCol:l,sum:a+l,isBlackSquare:s}),s?(n.push({row:a,col:l}),console.log(\"Valid move found:\",{row:a,col:l})):console.log(\"Not a black square\")}return console.log(\"Final valid moves:\",n),n};return a.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\",textAlign:\"center\"}},a.a.createElement(\"h1\",null,\"Checkers Game\"),a.a.createElement(\"div\",{className:\"game-status\",style:{fontSize:\"1.5em\",marginBottom:\"20px\",fontWeight:\"bold\",color:\"finished\"===o.status?\"#4CAF50\":\"#2196F3\"}},(()=>{return o.gameId?\"finished\"===o.status?\"Game Over! \".concat(null===(e=o.winner)||void 0===e?void 0:e.toUpperCase(),\" wins! \\ud83c\\udf89\"):\"Current Turn: \".concat(o.currentPlayer.toUpperCase()):\"Click 'New Game' to start playing!\";var e})()),a.a.createElement(\"div\",{className:\"game-board\",style:{display:\"inline-block\",border:\"2px solid #333\",backgroundColor:\"#fff\"}},o.board.map((r,d)=>a.a.createElement(\"div\",{key:d,className:\"board-row\",style:{display:\"flex\"}},r.map((r,u)=>{const p=(d+u)%2===1,m=(null===t||void 0===t?void 0:t.row)===d&&(null===t||void 0===t?void 0:t.col)===u,g=l.some(o=>o.row===d&&o.col===u);return a.a.createElement(\"div\",{key:u,onClick:()=>(async(r,a)=>{var d,u;if(!o.gameId||\"finished\"===o.status)return;const p=null===(d=o.board)||void 0===d?void 0:null===(u=d[r])||void 0===u?void 0:u[a];if(console.log(\"Clicked square:\",{row:r,col:a,piece:p}),console.log(\"Game state:\",{currentPlayer:o.currentPlayer,selectedSquare:t,validMoves:l}),!t){if(!p)return void console.log(\"Clicked empty square\");if(!(\"red\"===o.currentPlayer&&\"r\"===p.toLowerCase()||\"black\"===o.currentPlayer&&\"b\"===p.toLowerCase()))return void alert(\"You can only move your own pieces!\");const e=i(r,a);return console.log(\"Calculated valid moves:\",e),0===e.length?void alert(\"This piece has no valid moves!\"):(n({row:r,col:a,piece:p}),void s(e))}if(t.row===r&&t.col===a)return console.log(\"Deselecting piece\"),n(null),void s([]);const m=l.some(o=>o.row===r&&o.col===a);if(console.log(\"Move validation:\",{isValidDestination:m,selectedSquare:t,targetSquare:{row:r,col:a}}),!m)return console.log(\"Invalid move - not in valid moves list\"),n(null),void s([]);try{const l={fromRow:t.row,fromCol:t.col,toRow:r,toCol:a};console.log(\"Sending move to API:\",l);const d=await fetch(\"\".concat(c,\"/games/\").concat(o.gameId),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\",body:JSON.stringify(l)});if(!d.ok){const o=await d.json();throw console.error(\"API Error:\",{status:d.status,statusText:d.statusText,errorData:o}),new Error(o.error||\"Invalid move\")}const u=await d.json();console.log(\"Move successful:\",u),e(u),u.hasMoreJumps?(n({row:r,col:a,piece:u.board[r][a]}),s(i(r,a))):(n(null),s([]))}catch(g){console.error(\"Error making move:\",g),alert(g instanceof Error?g.message:\"Invalid move. Please try again.\"),n(null),s([])}})(d,u),style:{width:\"60px\",height:\"60px\",backgroundColor:p?\"#666\":\"#fff\",border:m?\"3px solid yellow\":\"1px solid #999\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",cursor:\"pointer\",position:\"relative\",boxSizing:\"border-box\"}},r&&a.a.createElement(\"div\",{style:{width:\"80%\",height:\"80%\",borderRadius:\"50%\",backgroundColor:\"r\"===r.toLowerCase()?\"#ff4444\":\"#333\",border:\"2px solid #fff\",boxShadow:\"0 0 10px rgba(0,0,0,0.3)\",position:\"relative\"}},r===r.toUpperCase()&&a.a.createElement(\"div\",{style:{position:\"absolute\",top:\"50%\",left:\"50%\",transform:\"translate(-50%, -50%)\",color:\"r\"===r.toLowerCase()?\"#ffcccc\":\"#666\",fontSize:\"24px\"}},\"\\u2654\")),g&&a.a.createElement(\"div\",{style:{position:\"absolute\",width:\"20px\",height:\"20px\",borderRadius:\"50%\",backgroundColor:\"rgba(0, 255, 0, 0.5)\",border:\"2px solid rgba(0, 255, 0, 0.8)\"}}))})))),a.a.createElement(\"div\",{style:{marginTop:\"20px\"}},a.a.createElement(\"button\",{onClick:async()=>{try{const t=await fetch(\"\".concat(c,\"/games\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\"});if(!t.ok)throw new Error(\"Failed to create game\");const r=await t.json();if(console.log(\"API Response:\",r),\"string\"===typeof r){const o=JSON.parse(r);console.log(\"Parsed new game state:\",o),e(o)}else console.log(\"Setting game state directly:\",r),e(r);n(null),s([])}catch(o){console.error(\"Error creating game:\",o),alert(\"Failed to create new game. Please try again.\")}},style:{padding:\"10px 20px\",fontSize:\"16px\",backgroundColor:\"#4CAF50\",color:\"white\",border:\"none\",borderRadius:\"4px\",cursor:\"pointer\",marginBottom:\"20px\"}},\"finished\"===o.status?\"Play Again\":o.gameId?\"Restart Game\":\"New Game\")))};t.n(n).a.createRoot(document.getElementById(\"root\")).render(a.a.createElement(a.a.StrictMode,null,a.a.createElement(l,null)))},3:function(o,e,t){o.exports=t(12)}},[[3,1,2]]]);","extractedComments":[]}