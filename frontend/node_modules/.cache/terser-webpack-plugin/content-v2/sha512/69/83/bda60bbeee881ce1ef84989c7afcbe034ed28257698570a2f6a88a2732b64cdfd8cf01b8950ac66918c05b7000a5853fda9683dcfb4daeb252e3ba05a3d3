{"map":"{\"version\":3,\"sources\":[\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/App.tsx\",\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/index.tsx\"],\"names\":[\"App\",\"game\",\"setGame\",\"useState\",\"gameId\",\"board\",\"Array\",\"fill\",\"map\",\"currentPlayer\",\"status\",\"createdAt\",\"updatedAt\",\"selectedSquare\",\"setSelectedSquare\",\"validMoves\",\"setValidMoves\",\"apiEndpoint\",\"calculateValidMoves\",\"row\",\"col\",\"piece\",\"isKing\",\"toUpperCase\",\"moves\",\"directions\",\"toLowerCase\",\"push\",\"includes\",\"jumps\",\"rowDir\",\"colDir\",\"jumpedRow\",\"jumpedCol\",\"newRow\",\"newCol\",\"jumpedPiece\",\"length\",\"React\",\"createElement\",\"className\",\"style\",\"padding\",\"textAlign\",\"fontSize\",\"marginBottom\",\"fontWeight\",\"color\",\"getGameStatus\",\"concat\",\"_game$winner\",\"winner\",\"display\",\"border\",\"backgroundColor\",\"rowIndex\",\"key\",\"colIndex\",\"isBlackSquare\",\"isSelected\",\"isValidMove\",\"some\",\"move\",\"onClick\",\"async\",\"_game$board\",\"_game$board$row\",\"console\",\"log\",\"alert\",\"isValidDestination\",\"targetSquare\",\"moveData\",\"fromRow\",\"fromCol\",\"toRow\",\"toCol\",\"response\",\"fetch\",\"method\",\"headers\",\"Content-Type\",\"Accept\",\"mode\",\"body\",\"JSON\",\"stringify\",\"ok\",\"errorData\",\"json\",\"error\",\"statusText\",\"Error\",\"updatedGame\",\"hasMoreJumps\",\"message\",\"handleSquareClick\",\"width\",\"height\",\"justifyContent\",\"alignItems\",\"cursor\",\"position\",\"boxSizing\",\"borderRadius\",\"boxShadow\",\"top\",\"left\",\"transform\",\"marginTop\",\"data\",\"newGame\",\"parse\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\n\\ninterface GameState {\\n  gameId: string;\\n  board: string[][];\\n  currentPlayer: 'red' | 'black';\\n  status: 'active' | 'finished';\\n  winner?: string;\\n  createdAt: string;\\n  updatedAt: string;\\n  hasMoreJumps?: boolean;\\n}\\n\\ninterface Square {\\n  row: number;\\n  col: number;\\n  piece: string;\\n}\\n\\ninterface Move {\\n  row: number;\\n  col: number;\\n}\\n\\nfunction App() {\\n  const [game, setGame] = useState<GameState>({\\n    gameId: '',\\n    board: Array(8).fill(null).map(() => Array(8).fill('')),\\n    currentPlayer: 'red',\\n    status: 'active',\\n    createdAt: '',\\n    updatedAt: ''\\n  });\\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\\n  const apiEndpoint = 'https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod';\\n\\n  const getGameStatus = () => {\\n    if (!game.gameId) {\\n      return \\\"Click 'New Game' to start playing!\\\";\\n    }\\n    if (game.status === 'finished') {\\n      return `Game Over! ${game.winner?.toUpperCase()} wins! ðŸŽ‰`;\\n    }\\n    return `Current Turn: ${game.currentPlayer.toUpperCase()}`;\\n  };\\n\\n  const createNewGame = async () => {\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors'\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to create game');\\n      }\\n\\n      const data = await response.json();\\n      console.log('API Response:', data);\\n      \\n      if (typeof data === 'string') {\\n        const newGame = JSON.parse(data);\\n        console.log('Parsed new game state:', newGame);\\n        setGame(newGame);\\n      } else {\\n        console.log('Setting game state directly:', data);\\n        setGame(data);\\n      }\\n      \\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error creating game:', error);\\n      alert('Failed to create new game. Please try again.');\\n    }\\n  };\\n\\n  const calculateValidMoves = (row: number, col: number): Move[] => {\\n    const piece = game.board[row][col];\\n    if (!piece) return [];\\n\\n    const isKing = piece === piece.toUpperCase();\\n    const moves: Move[] = [];\\n\\n    // Determine valid directions based on piece type and color\\n    const directions: number[] = [];\\n    if (piece.toLowerCase() === 'r') {\\n      directions.push(-1); // Red pieces move up\\n    } else if (piece.toLowerCase() === 'b') {\\n      directions.push(1);  // Black pieces move down\\n    }\\n    if (isKing) {\\n      // Kings can move both up and down\\n      if (!directions.includes(-1)) directions.push(-1);\\n      if (!directions.includes(1)) directions.push(1);\\n    }\\n\\n    // First check for jumps (these are mandatory)\\n    const jumps: Move[] = [];\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const jumpedRow = row + rowDir;\\n        const jumpedCol = col + colDir;\\n        const newRow = row + (rowDir * 2);\\n        const newCol = col + (colDir * 2);\\n\\n        // Check if jump is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) continue;\\n        \\n        // Check if there's an opponent's piece to jump over\\n        const jumpedPiece = game.board[jumpedRow][jumpedCol];\\n        if (!jumpedPiece) continue;\\n        \\n        // Check if landing square is empty\\n        if (game.board[newRow][newCol]) continue;\\n        \\n        const isOpponentPiece = \\n          (piece.toLowerCase() === 'r' && jumpedPiece.toLowerCase() === 'b') ||\\n          (piece.toLowerCase() === 'b' && jumpedPiece.toLowerCase() === 'r');\\n\\n        // Only allow jumps over opponent's pieces to black squares\\n        if (isOpponentPiece && (newRow + newCol) % 2 === 1) {\\n          jumps.push({ row: newRow, col: newCol });\\n        }\\n      }\\n    }\\n\\n    // If there are jumps available, they are mandatory\\n    if (jumps.length > 0) {\\n      return jumps;\\n    }\\n\\n    // If no jumps are available, check for regular moves\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const newRow = row + rowDir;\\n        const newCol = col + colDir;\\n\\n        // Check if move is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) continue;\\n        \\n        // Check if destination square is empty\\n        if (game.board[newRow][newCol]) continue;\\n\\n        // Only allow moves to black squares\\n        if ((newRow + newCol) % 2 === 1) {\\n          moves.push({ row: newRow, col: newCol });\\n        }\\n      }\\n    }\\n\\n    return moves;\\n  };\\n\\n  const handleSquareClick = async (row: number, col: number) => {\\n    if (!game.gameId || game.status === 'finished') return;\\n    \\n    const piece = game.board?.[row]?.[col];\\n    console.log('Clicked square:', {row, col, piece});\\n    console.log('Game state:', {\\n      currentPlayer: game.currentPlayer,\\n      selectedSquare,\\n      validMoves\\n    });\\n\\n    // First click - selecting a piece\\n    if (!selectedSquare) {\\n      if (!piece) {\\n        console.log('Clicked empty square');\\n        return;\\n      }\\n\\n      const isCurrentPlayersPiece = \\n        (game.currentPlayer === 'red' && piece.toLowerCase() === 'r') ||\\n        (game.currentPlayer === 'black' && piece.toLowerCase() === 'b');\\n\\n      if (!isCurrentPlayersPiece) {\\n        alert(\\\"You can only move your own pieces!\\\");\\n        return;\\n      }\\n\\n      const moves = calculateValidMoves(row, col);\\n      console.log('Calculated valid moves:', moves);\\n      \\n      if (moves.length === 0) {\\n        alert(\\\"This piece has no valid moves!\\\");\\n        return;\\n      }\\n\\n      setSelectedSquare({ row, col, piece });\\n      setValidMoves(moves);\\n      return;\\n    }\\n\\n    // Second click - making a move\\n    if (selectedSquare.row === row && selectedSquare.col === col) {\\n      console.log('Deselecting piece');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    // Check if this is a valid move\\n    const isValidDestination = validMoves.some(move => move.row === row && move.col === col);\\n    console.log('Move validation:', {\\n      isValidDestination,\\n      selectedSquare,\\n      targetSquare: {row, col}\\n    });\\n\\n    if (!isValidDestination) {\\n      console.log('Invalid move - not in valid moves list');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    try {\\n      const moveData = {\\n        fromRow: selectedSquare.row,\\n        fromCol: selectedSquare.col,\\n        toRow: row,\\n        toCol: col\\n      };\\n      console.log('Sending move to API:', moveData);\\n\\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\\n        method: 'PUT',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors',\\n        body: JSON.stringify(moveData)\\n      });\\n\\n      if (!response.ok) {\\n        const errorData = await response.json();\\n        console.error('API Error:', {\\n          status: response.status,\\n          statusText: response.statusText,\\n          errorData\\n        });\\n        throw new Error(errorData.error || 'Invalid move');\\n      }\\n\\n      const updatedGame = await response.json();\\n      console.log('Move successful:', updatedGame);\\n      \\n      setGame(updatedGame);\\n      \\n      // Only clear selection if there are no more jumps available\\n      if (!updatedGame.hasMoreJumps) {\\n        setSelectedSquare(null);\\n        setValidMoves([]);\\n      } else {\\n        // Update selected square to new position for next jump\\n        setSelectedSquare({\\n          row,\\n          col,\\n          piece: updatedGame.board[row][col]\\n        });\\n        // Calculate new valid moves from the new position\\n        setValidMoves(calculateValidMoves(row, col));\\n      }\\n    } catch (error) {\\n      console.error('Error making move:', error);\\n      alert(error instanceof Error ? error.message : 'Invalid move. Please try again.');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\" style={{ padding: '20px', textAlign: 'center' }}>\\n      <h1>Checkers Game</h1>\\n      <div className=\\\"game-status\\\" style={{ \\n        fontSize: '1.5em', \\n        marginBottom: '20px',\\n        fontWeight: 'bold',\\n        color: game.status === 'finished' ? '#4CAF50' : '#2196F3'\\n      }}>\\n        {getGameStatus()}\\n      </div>\\n      <div className=\\\"game-board\\\" style={{\\n        display: 'inline-block',\\n        border: '2px solid #333',\\n        backgroundColor: '#fff'\\n      }}>\\n        {game.board.map((row, rowIndex) => (\\n          <div key={rowIndex} className=\\\"board-row\\\" style={{\\n            display: 'flex'\\n          }}>\\n            {row.map((piece, colIndex) => {\\n              const isBlackSquare = (rowIndex + colIndex) % 2 === 1;\\n              const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\\n              const isValidMove = validMoves.some(move => move.row === rowIndex && move.col === colIndex);\\n              \\n              return (\\n                <div\\n                  key={colIndex}\\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\\n                  style={{\\n                    width: '60px',\\n                    height: '60px',\\n                    backgroundColor: isBlackSquare ? '#666' : '#fff',\\n                    border: isSelected ? '3px solid yellow' : '1px solid #999',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center',\\n                    cursor: 'pointer',\\n                    position: 'relative',\\n                    boxSizing: 'border-box'\\n                  }}\\n                >\\n                  {piece && (\\n                    <div style={{\\n                      width: '80%',\\n                      height: '80%',\\n                      borderRadius: '50%',\\n                      backgroundColor: piece.toLowerCase() === 'r' ? '#ff4444' : '#333',\\n                      border: '2px solid #fff',\\n                      boxShadow: '0 0 10px rgba(0,0,0,0.3)',\\n                      position: 'relative'\\n                    }}>\\n                      {piece === piece.toUpperCase() && (\\n                        <div style={{\\n                          position: 'absolute',\\n                          top: '50%',\\n                          left: '50%',\\n                          transform: 'translate(-50%, -50%)',\\n                          color: piece.toLowerCase() === 'r' ? '#ffcccc' : '#666',\\n                          fontSize: '24px'\\n                        }}>\\n                          â™”\\n                        </div>\\n                      )}\\n                    </div>\\n                  )}\\n                  {isValidMove && (\\n                    <div style={{\\n                      position: 'absolute',\\n                      width: '20px',\\n                      height: '20px',\\n                      borderRadius: '50%',\\n                      backgroundColor: 'rgba(0, 255, 0, 0.5)',\\n                      border: '2px solid rgba(0, 255, 0, 0.8)'\\n                    }} />\\n                  )}\\n                </div>\\n              );\\n            })}\\n          </div>\\n        ))}\\n      </div>\\n      <div style={{ marginTop: '20px' }}>\\n        <button \\n          onClick={createNewGame}\\n          style={{\\n            padding: '10px 20px',\\n            fontSize: '16px',\\n            backgroundColor: '#4CAF50',\\n            color: 'white',\\n            border: 'none',\\n            borderRadius: '4px',\\n            cursor: 'pointer',\\n            marginBottom: '20px'\\n          }}\\n        >\\n          {game.status === 'finished' ? 'Play Again' : game.gameId ? 'Restart Game' : 'New Game'}\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,o,t){\"use strict\";t.r(o);var r=t(0),a=t.n(r),n=t(2);var s=function(){const[e,o]=Object(r.useState)({gameId:\"\",board:Array(8).fill(null).map(()=>Array(8).fill(\"\")),currentPlayer:\"red\",status:\"active\",createdAt:\"\",updatedAt:\"\"}),[t,n]=Object(r.useState)(null),[s,l]=Object(r.useState)([]),i=\"https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod\",c=(o,t)=>{const r=e.board[o][t];if(!r)return[];const a=r===r.toUpperCase(),n=[],s=[];\"r\"===r.toLowerCase()?s.push(-1):\"b\"===r.toLowerCase()&&s.push(1),a&&(s.includes(-1)||s.push(-1),s.includes(1)||s.push(1));const l=[];for(const i of s)for(const a of[-1,1]){const n=o+i,s=t+a,c=o+2*i,d=t+2*a;if(c<0||c>7||d<0||d>7)continue;const u=e.board[n][s];u&&(e.board[c][d]||(\"r\"===r.toLowerCase()&&\"b\"===u.toLowerCase()||\"b\"===r.toLowerCase()&&\"r\"===u.toLowerCase())&&(c+d)%2===1&&l.push({row:c,col:d}))}if(l.length>0)return l;for(const i of s)for(const r of[-1,1]){const a=o+i,s=t+r;a<0||a>7||s<0||s>7||e.board[a][s]||(a+s)%2===1&&n.push({row:a,col:s})}return n};return a.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\",textAlign:\"center\"}},a.a.createElement(\"h1\",null,\"Checkers Game\"),a.a.createElement(\"div\",{className:\"game-status\",style:{fontSize:\"1.5em\",marginBottom:\"20px\",fontWeight:\"bold\",color:\"finished\"===e.status?\"#4CAF50\":\"#2196F3\"}},(()=>{return e.gameId?\"finished\"===e.status?\"Game Over! \".concat(null===(o=e.winner)||void 0===o?void 0:o.toUpperCase(),\" wins! \\ud83c\\udf89\"):\"Current Turn: \".concat(e.currentPlayer.toUpperCase()):\"Click 'New Game' to start playing!\";var o})()),a.a.createElement(\"div\",{className:\"game-board\",style:{display:\"inline-block\",border:\"2px solid #333\",backgroundColor:\"#fff\"}},e.board.map((r,d)=>a.a.createElement(\"div\",{key:d,className:\"board-row\",style:{display:\"flex\"}},r.map((r,u)=>{const p=(d+u)%2===1,m=(null===t||void 0===t?void 0:t.row)===d&&(null===t||void 0===t?void 0:t.col)===u,g=s.some(e=>e.row===d&&e.col===u);return a.a.createElement(\"div\",{key:u,onClick:()=>(async(r,a)=>{var d,u;if(!e.gameId||\"finished\"===e.status)return;const p=null===(d=e.board)||void 0===d?void 0:null===(u=d[r])||void 0===u?void 0:u[a];if(console.log(\"Clicked square:\",{row:r,col:a,piece:p}),console.log(\"Game state:\",{currentPlayer:e.currentPlayer,selectedSquare:t,validMoves:s}),!t){if(!p)return void console.log(\"Clicked empty square\");if(!(\"red\"===e.currentPlayer&&\"r\"===p.toLowerCase()||\"black\"===e.currentPlayer&&\"b\"===p.toLowerCase()))return void alert(\"You can only move your own pieces!\");const o=c(r,a);return console.log(\"Calculated valid moves:\",o),0===o.length?void alert(\"This piece has no valid moves!\"):(n({row:r,col:a,piece:p}),void l(o))}if(t.row===r&&t.col===a)return console.log(\"Deselecting piece\"),n(null),void l([]);const m=s.some(e=>e.row===r&&e.col===a);if(console.log(\"Move validation:\",{isValidDestination:m,selectedSquare:t,targetSquare:{row:r,col:a}}),!m)return console.log(\"Invalid move - not in valid moves list\"),n(null),void l([]);try{const s={fromRow:t.row,fromCol:t.col,toRow:r,toCol:a};console.log(\"Sending move to API:\",s);const d=await fetch(\"\".concat(i,\"/games/\").concat(e.gameId),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\",body:JSON.stringify(s)});if(!d.ok){const e=await d.json();throw console.error(\"API Error:\",{status:d.status,statusText:d.statusText,errorData:e}),new Error(e.error||\"Invalid move\")}const u=await d.json();console.log(\"Move successful:\",u),o(u),u.hasMoreJumps?(n({row:r,col:a,piece:u.board[r][a]}),l(c(r,a))):(n(null),l([]))}catch(g){console.error(\"Error making move:\",g),alert(g instanceof Error?g.message:\"Invalid move. Please try again.\"),n(null),l([])}})(d,u),style:{width:\"60px\",height:\"60px\",backgroundColor:p?\"#666\":\"#fff\",border:m?\"3px solid yellow\":\"1px solid #999\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",cursor:\"pointer\",position:\"relative\",boxSizing:\"border-box\"}},r&&a.a.createElement(\"div\",{style:{width:\"80%\",height:\"80%\",borderRadius:\"50%\",backgroundColor:\"r\"===r.toLowerCase()?\"#ff4444\":\"#333\",border:\"2px solid #fff\",boxShadow:\"0 0 10px rgba(0,0,0,0.3)\",position:\"relative\"}},r===r.toUpperCase()&&a.a.createElement(\"div\",{style:{position:\"absolute\",top:\"50%\",left:\"50%\",transform:\"translate(-50%, -50%)\",color:\"r\"===r.toLowerCase()?\"#ffcccc\":\"#666\",fontSize:\"24px\"}},\"\\u2654\")),g&&a.a.createElement(\"div\",{style:{position:\"absolute\",width:\"20px\",height:\"20px\",borderRadius:\"50%\",backgroundColor:\"rgba(0, 255, 0, 0.5)\",border:\"2px solid rgba(0, 255, 0, 0.8)\"}}))})))),a.a.createElement(\"div\",{style:{marginTop:\"20px\"}},a.a.createElement(\"button\",{onClick:async()=>{try{const t=await fetch(\"\".concat(i,\"/games\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\"});if(!t.ok)throw new Error(\"Failed to create game\");const r=await t.json();if(console.log(\"API Response:\",r),\"string\"===typeof r){const e=JSON.parse(r);console.log(\"Parsed new game state:\",e),o(e)}else console.log(\"Setting game state directly:\",r),o(r);n(null),l([])}catch(e){console.error(\"Error creating game:\",e),alert(\"Failed to create new game. Please try again.\")}},style:{padding:\"10px 20px\",fontSize:\"16px\",backgroundColor:\"#4CAF50\",color:\"white\",border:\"none\",borderRadius:\"4px\",cursor:\"pointer\",marginBottom:\"20px\"}},\"finished\"===e.status?\"Play Again\":e.gameId?\"Restart Game\":\"New Game\")))};t.n(n).a.createRoot(document.getElementById(\"root\")).render(a.a.createElement(a.a.StrictMode,null,a.a.createElement(s,null)))},3:function(e,o,t){e.exports=t(12)}},[[3,1,2]]]);","extractedComments":[]}