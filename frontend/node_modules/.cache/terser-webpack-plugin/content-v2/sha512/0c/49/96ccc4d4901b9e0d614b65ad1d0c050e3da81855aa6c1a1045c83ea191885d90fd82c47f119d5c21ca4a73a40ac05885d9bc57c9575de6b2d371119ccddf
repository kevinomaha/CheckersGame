{"map":"{\"version\":3,\"sources\":[\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/App.tsx\",\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/index.tsx\"],\"names\":[\"App\",\"game\",\"setGame\",\"useState\",\"gameId\",\"board\",\"Array\",\"fill\",\"map\",\"currentPlayer\",\"status\",\"createdAt\",\"updatedAt\",\"selectedSquare\",\"setSelectedSquare\",\"validMoves\",\"setValidMoves\",\"apiEndpoint\",\"countPieces\",\"color\",\"count\",\"row\",\"col\",\"piece\",\"toLowerCase\",\"calculateValidMoves\",\"console\",\"log\",\"isKing\",\"toUpperCase\",\"isBlackSquare\",\"moves\",\"directions\",\"push\",\"includes\",\"jumps\",\"rowDir\",\"colDir\",\"_game$board$jumpedRow\",\"jumpedRow\",\"jumpedCol\",\"newRow\",\"newCol\",\"from\",\"over\",\"to\",\"jumpedPiece\",\"isOpponentPiece\",\"length\",\"sum\",\"handleSquareClick\",\"async\",\"_game$board\",\"_game$board$row\",\"alert\",\"isValidDestination\",\"some\",\"move\",\"targetSquare\",\"moveData\",\"fromRow\",\"fromCol\",\"toRow\",\"toCol\",\"response\",\"fetch\",\"concat\",\"method\",\"headers\",\"Content-Type\",\"Accept\",\"mode\",\"body\",\"JSON\",\"stringify\",\"ok\",\"errorData\",\"json\",\"error\",\"statusText\",\"Error\",\"updatedGame\",\"hasMoreJumps\",\"winner\",\"checkWinner\",\"redPieces\",\"blackPieces\",\"red\",\"black\",\"prev\",\"_objectSpread\",\"message\",\"React\",\"createElement\",\"className\",\"style\",\"padding\",\"textAlign\",\"fontSize\",\"marginBottom\",\"fontWeight\",\"charAt\",\"slice\",\"display\",\"border\",\"backgroundColor\",\"rowIndex\",\"key\",\"colIndex\",\"isSelected\",\"isValidMove\",\"onClick\",\"width\",\"height\",\"justifyContent\",\"alignItems\",\"cursor\",\"position\",\"boxSizing\",\"borderRadius\",\"boxShadow\",\"top\",\"left\",\"transform\",\"marginTop\",\"data\",\"newGame\",\"parse\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\n\\ninterface GameState {\\n  gameId: string;\\n  board: string[][];\\n  currentPlayer: 'red' | 'black';\\n  status: 'active' | 'finished';\\n  winner?: string;\\n  createdAt: string;\\n  updatedAt: string;\\n  hasMoreJumps?: boolean;\\n}\\n\\ninterface Square {\\n  row: number;\\n  col: number;\\n  piece: string;\\n}\\n\\ninterface Move {\\n  row: number;\\n  col: number;\\n}\\n\\nfunction App() {\\n  const [game, setGame] = useState<GameState>({\\n    gameId: '',\\n    board: Array(8).fill(null).map(() => Array(8).fill('')),\\n    currentPlayer: 'red',\\n    status: 'active',\\n    createdAt: '',\\n    updatedAt: ''\\n  });\\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\\n  const apiEndpoint = 'https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod';\\n\\n  const getGameStatus = () => {\\n    if (!game.gameId) {\\n      return \\\"Click 'New Game' to start playing!\\\";\\n    }\\n    if (game.status === 'finished') {\\n      return `Game Over! ${game.winner?.toUpperCase()} wins! ðŸŽ‰`;\\n    }\\n    return `Current Turn: ${game.currentPlayer.toUpperCase()}`;\\n  };\\n\\n  const createNewGame = async () => {\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors'\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to create game');\\n      }\\n\\n      const data = await response.json();\\n      console.log('API Response:', data);\\n      \\n      if (typeof data === 'string') {\\n        const newGame = JSON.parse(data);\\n        console.log('Parsed new game state:', newGame);\\n        setGame(newGame);\\n      } else {\\n        console.log('Setting game state directly:', data);\\n        setGame(data);\\n      }\\n      \\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error creating game:', error);\\n      alert('Failed to create new game. Please try again.');\\n    }\\n  };\\n\\n  const countPieces = (color: 'r' | 'b'): number => {\\n    let count = 0;\\n    for (let row = 0; row < 8; row++) {\\n      for (let col = 0; col < 8; col++) {\\n        const piece = game.board[row][col];\\n        if (piece && piece.toLowerCase() === color) {\\n          count++;\\n        }\\n      }\\n    }\\n    return count;\\n  };\\n\\n  const checkWinner = (): string | null => {\\n    const redPieces = countPieces('r');\\n    const blackPieces = countPieces('b');\\n\\n    console.log('Piece count:', { red: redPieces, black: blackPieces });\\n\\n    if (redPieces === 0) return 'black';\\n    if (blackPieces === 0) return 'red';\\n    return null;\\n  };\\n\\n  const calculateValidMoves = (row: number, col: number): Move[] => {\\n    const piece = game.board[row][col];\\n    console.log('Calculating moves for piece:', {\\n      row,\\n      col,\\n      piece,\\n      isKing: piece === piece.toUpperCase(),\\n      isBlackSquare: (row + col) % 2 === 0\\n    });\\n    \\n    if (!piece) return [];\\n\\n    const isKing = piece === piece.toUpperCase();\\n    const moves: Move[] = [];\\n\\n    // Determine valid directions based on piece type and color\\n    const directions: number[] = [];\\n    if (piece.toLowerCase() === 'r') {\\n      directions.push(-1); // Red pieces move up\\n    } else if (piece.toLowerCase() === 'b') {\\n      directions.push(1);  // Black pieces move down\\n    }\\n    if (isKing) {\\n      // Kings can move both up and down\\n      if (!directions.includes(-1)) directions.push(-1);\\n      if (!directions.includes(1)) directions.push(1);\\n    }\\n\\n    console.log('Movement directions:', directions);\\n\\n    // First check for jumps (these are mandatory)\\n    const jumps: Move[] = [];\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const jumpedRow = row + rowDir;\\n        const jumpedCol = col + colDir;\\n        const newRow = row + (rowDir * 2);\\n        const newCol = col + (colDir * 2);\\n\\n        console.log('Checking jump:', {\\n          from: { row, col },\\n          over: { row: jumpedRow, col: jumpedCol, piece: game.board[jumpedRow]?.[jumpedCol] },\\n          to: { row: newRow, col: newCol },\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Check if jump is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Jump out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if there's an opponent's piece to jump over\\n        const jumpedPiece = game.board[jumpedRow][jumpedCol];\\n        if (!jumpedPiece) {\\n          console.log('No piece to jump over');\\n          continue;\\n        }\\n        \\n        // Check if landing square is empty\\n        if (game.board[newRow][newCol]) {\\n          console.log('Landing square occupied');\\n          continue;\\n        }\\n        \\n        const isOpponentPiece = \\n          (piece.toLowerCase() === 'r' && jumpedPiece.toLowerCase() === 'b') ||\\n          (piece.toLowerCase() === 'b' && jumpedPiece.toLowerCase() === 'r');\\n\\n        console.log('Jump validation:', {\\n          isOpponentPiece,\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Only allow jumps over opponent's pieces to black squares\\n        if (isOpponentPiece && (newRow + newCol) % 2 === 0) {\\n          jumps.push({ row: newRow, col: newCol });\\n          console.log('Valid jump found:', { row: newRow, col: newCol });\\n        }\\n      }\\n    }\\n\\n    // If there are jumps available, they are mandatory\\n    if (jumps.length > 0) {\\n      console.log('Mandatory jumps found:', jumps);\\n      return jumps;\\n    }\\n\\n    // If no jumps are available, check for regular moves\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const newRow = row + rowDir;\\n        const newCol = col + colDir;\\n\\n        console.log('Checking regular move:', {\\n          from: { row, col },\\n          to: { row: newRow, col: newCol },\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Check if move is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Move out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if destination square is empty\\n        if (game.board[newRow][newCol]) {\\n          console.log('Destination square occupied');\\n          continue;\\n        }\\n\\n        // Only allow moves to black squares\\n        const isBlackSquare = (newRow + newCol) % 2 === 0;\\n        console.log('Square color check:', {\\n          newRow,\\n          newCol,\\n          sum: newRow + newCol,\\n          isBlackSquare\\n        });\\n\\n        if (isBlackSquare) {\\n          moves.push({ row: newRow, col: newCol });\\n          console.log('Valid move found:', { row: newRow, col: newCol });\\n        } else {\\n          console.log('Not a black square');\\n        }\\n      }\\n    }\\n\\n    console.log('Final valid moves:', moves);\\n    return moves;\\n  };\\n\\n  const handleSquareClick = async (row: number, col: number) => {\\n    if (!game.gameId || game.status === 'finished') return;\\n    \\n    const piece = game.board?.[row]?.[col];\\n    console.log('Clicked square:', {row, col, piece});\\n    console.log('Game state:', {\\n      currentPlayer: game.currentPlayer,\\n      selectedSquare,\\n      validMoves\\n    });\\n\\n    // First click - selecting a piece\\n    if (!selectedSquare) {\\n      if (!piece) {\\n        console.log('Clicked empty square');\\n        return;\\n      }\\n\\n      const isCurrentPlayersPiece = \\n        (game.currentPlayer === 'red' && piece.toLowerCase() === 'r') ||\\n        (game.currentPlayer === 'black' && piece.toLowerCase() === 'b');\\n\\n      if (!isCurrentPlayersPiece) {\\n        alert(\\\"You can only move your own pieces!\\\");\\n        return;\\n      }\\n\\n      const moves = calculateValidMoves(row, col);\\n      console.log('Calculated valid moves:', moves);\\n      \\n      if (moves.length === 0) {\\n        alert(\\\"This piece has no valid moves!\\\");\\n        return;\\n      }\\n\\n      setSelectedSquare({ row, col, piece });\\n      setValidMoves(moves);\\n      return;\\n    }\\n\\n    // Second click - making a move\\n    if (selectedSquare.row === row && selectedSquare.col === col) {\\n      console.log('Deselecting piece');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    // Check if this is a valid move\\n    const isValidDestination = validMoves.some(move => move.row === row && move.col === col);\\n    console.log('Move validation:', {\\n      isValidDestination,\\n      selectedSquare,\\n      targetSquare: {row, col}\\n    });\\n\\n    if (!isValidDestination) {\\n      console.log('Invalid move - not in valid moves list');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    try {\\n      const moveData = {\\n        fromRow: selectedSquare.row,\\n        fromCol: selectedSquare.col,\\n        toRow: row,\\n        toCol: col\\n      };\\n      console.log('Sending move to API:', moveData);\\n\\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\\n        method: 'PUT',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors',\\n        body: JSON.stringify(moveData)\\n      });\\n\\n      if (!response.ok) {\\n        const errorData = await response.json();\\n        console.error('API Error:', {\\n          status: response.status,\\n          statusText: response.statusText,\\n          errorData\\n        });\\n        throw new Error(errorData.error || 'Invalid move');\\n      }\\n\\n      const updatedGame = await response.json();\\n      console.log('Move successful:', updatedGame);\\n      \\n      setGame(updatedGame);\\n      \\n      // Only clear selection if there are no more jumps available\\n      if (!updatedGame.hasMoreJumps) {\\n        setSelectedSquare(null);\\n        setValidMoves([]);\\n      } else {\\n        // Update selected square to new position for next jump\\n        setSelectedSquare({\\n          row,\\n          col,\\n          piece: updatedGame.board[row][col]\\n        });\\n        // Calculate new valid moves from the new position\\n        setValidMoves(calculateValidMoves(row, col));\\n      }\\n\\n      // Check for winner after move\\n      const winner = checkWinner();\\n      if (winner) {\\n        setGame(prev => ({\\n          ...prev,\\n          status: 'finished',\\n          winner: winner\\n        }));\\n      }\\n    } catch (error) {\\n      console.error('Error making move:', error);\\n      alert(error instanceof Error ? error.message : 'Invalid move. Please try again.');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\" style={{ padding: '20px', textAlign: 'center' }}>\\n      <h1>Checkers Game</h1>\\n      <div className=\\\"game-status\\\" style={{ \\n        fontSize: '1.5em', \\n        marginBottom: '20px',\\n        fontWeight: 'bold',\\n        color: game.status === 'finished' ? '#4CAF50' : '#2196F3'\\n      }}>\\n        {game.status === 'finished' && game.winner ? `Game Over - ${game.winner.charAt(0).toUpperCase() + game.winner.slice(1)} Wins!` : `Current Turn: ${game.currentPlayer.charAt(0).toUpperCase() + game.currentPlayer.slice(1)}`}\\n      </div>\\n      <div className=\\\"game-board\\\" style={{\\n        display: 'inline-block',\\n        border: '2px solid #333',\\n        backgroundColor: '#fff'\\n      }}>\\n        {game.board.map((row, rowIndex) => (\\n          <div key={rowIndex} className=\\\"board-row\\\" style={{\\n            display: 'flex'\\n          }}>\\n            {row.map((piece, colIndex) => {\\n              const isBlackSquare = (rowIndex + colIndex) % 2 === 0;\\n              const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\\n              const isValidMove = validMoves.some(move => move.row === rowIndex && move.col === colIndex);\\n              \\n              return (\\n                <div\\n                  key={colIndex}\\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\\n                  style={{\\n                    width: '60px',\\n                    height: '60px',\\n                    backgroundColor: isBlackSquare ? '#666' : '#fff',\\n                    border: isSelected ? '3px solid yellow' : '1px solid #999',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center',\\n                    cursor: 'pointer',\\n                    position: 'relative',\\n                    boxSizing: 'border-box'\\n                  }}\\n                >\\n                  {piece && (\\n                    <div style={{\\n                      width: '80%',\\n                      height: '80%',\\n                      borderRadius: '50%',\\n                      backgroundColor: piece.toLowerCase() === 'r' ? '#ff4444' : '#333',\\n                      border: '2px solid #fff',\\n                      boxShadow: '0 0 10px rgba(0,0,0,0.3)',\\n                      position: 'relative'\\n                    }}>\\n                      {piece === piece.toUpperCase() && (\\n                        <div style={{\\n                          position: 'absolute',\\n                          top: '50%',\\n                          left: '50%',\\n                          transform: 'translate(-50%, -50%)',\\n                          color: piece.toLowerCase() === 'r' ? '#ffcccc' : '#666',\\n                          fontSize: '24px'\\n                        }}>\\n                          â™”\\n                        </div>\\n                      )}\\n                    </div>\\n                  )}\\n                  {isValidMove && (\\n                    <div style={{\\n                      position: 'absolute',\\n                      width: '20px',\\n                      height: '20px',\\n                      borderRadius: '50%',\\n                      backgroundColor: 'rgba(0, 255, 0, 0.5)',\\n                      border: '2px solid rgba(0, 255, 0, 0.8)'\\n                    }} />\\n                  )}\\n                </div>\\n              );\\n            })}\\n          </div>\\n        ))}\\n      </div>\\n      <div style={{ marginTop: '20px' }}>\\n        <button \\n          onClick={createNewGame}\\n          style={{\\n            padding: '10px 20px',\\n            fontSize: '16px',\\n            backgroundColor: '#4CAF50',\\n            color: 'white',\\n            border: 'none',\\n            borderRadius: '4px',\\n            cursor: 'pointer',\\n            marginBottom: '20px'\\n          }}\\n        >\\n          {game.status === 'finished' ? 'Play Again' : game.gameId ? 'Restart Game' : 'New Game'}\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(o,e,t){\"use strict\";t.r(e);var r=t(0),n=t.n(r),a=t(3),l=t.n(a),s=t(1);var c=function(){const[o,e]=Object(r.useState)({gameId:\"\",board:Array(8).fill(null).map(()=>Array(8).fill(\"\")),currentPlayer:\"red\",status:\"active\",createdAt:\"\",updatedAt:\"\"}),[t,a]=Object(r.useState)(null),[l,c]=Object(r.useState)([]),i=\"https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod\",d=e=>{let t=0;for(let r=0;r<8;r++)for(let n=0;n<8;n++){const a=o.board[r][n];a&&a.toLowerCase()===e&&t++}return t},u=(e,t)=>{const r=o.board[e][t];if(console.log(\"Calculating moves for piece:\",{row:e,col:t,piece:r,isKing:r===r.toUpperCase(),isBlackSquare:(e+t)%2===0}),!r)return[];const n=r===r.toUpperCase(),a=[],l=[];\"r\"===r.toLowerCase()?l.push(-1):\"b\"===r.toLowerCase()&&l.push(1),n&&(l.includes(-1)||l.push(-1),l.includes(1)||l.push(1)),console.log(\"Movement directions:\",l);const s=[];for(const i of l)for(const n of[-1,1]){var c;const a=e+i,l=t+n,d=e+2*i,u=t+2*n;if(console.log(\"Checking jump:\",{from:{row:e,col:t},over:{row:a,col:l,piece:null===(c=o.board[a])||void 0===c?void 0:c[l]},to:{row:d,col:u},isBlackSquare:(d+u)%2===0}),d<0||d>7||u<0||u>7){console.log(\"Jump out of bounds\");continue}const p=o.board[a][l];if(!p){console.log(\"No piece to jump over\");continue}if(o.board[d][u]){console.log(\"Landing square occupied\");continue}const m=\"r\"===r.toLowerCase()&&\"b\"===p.toLowerCase()||\"b\"===r.toLowerCase()&&\"r\"===p.toLowerCase();console.log(\"Jump validation:\",{isOpponentPiece:m,isBlackSquare:(d+u)%2===0}),m&&(d+u)%2===0&&(s.push({row:d,col:u}),console.log(\"Valid jump found:\",{row:d,col:u}))}if(s.length>0)return console.log(\"Mandatory jumps found:\",s),s;for(const i of l)for(const r of[-1,1]){const n=e+i,l=t+r;if(console.log(\"Checking regular move:\",{from:{row:e,col:t},to:{row:n,col:l},isBlackSquare:(n+l)%2===0}),n<0||n>7||l<0||l>7){console.log(\"Move out of bounds\");continue}if(o.board[n][l]){console.log(\"Destination square occupied\");continue}const s=(n+l)%2===0;console.log(\"Square color check:\",{newRow:n,newCol:l,sum:n+l,isBlackSquare:s}),s?(a.push({row:n,col:l}),console.log(\"Valid move found:\",{row:n,col:l})):console.log(\"Not a black square\")}return console.log(\"Final valid moves:\",a),a},p=async(r,n)=>{var p,m;if(!o.gameId||\"finished\"===o.status)return;const g=null===(p=o.board)||void 0===p?void 0:null===(m=p[r])||void 0===m?void 0:m[n];if(console.log(\"Clicked square:\",{row:r,col:n,piece:g}),console.log(\"Game state:\",{currentPlayer:o.currentPlayer,selectedSquare:t,validMoves:l}),!t){if(!g)return void console.log(\"Clicked empty square\");if(!(\"red\"===o.currentPlayer&&\"r\"===g.toLowerCase()||\"black\"===o.currentPlayer&&\"b\"===g.toLowerCase()))return void alert(\"You can only move your own pieces!\");const e=u(r,n);return console.log(\"Calculated valid moves:\",e),0===e.length?void alert(\"This piece has no valid moves!\"):(a({row:r,col:n,piece:g}),void c(e))}if(t.row===r&&t.col===n)return console.log(\"Deselecting piece\"),a(null),void c([]);const f=l.some(o=>o.row===r&&o.col===n);if(console.log(\"Move validation:\",{isValidDestination:f,selectedSquare:t,targetSquare:{row:r,col:n}}),!f)return console.log(\"Invalid move - not in valid moves list\"),a(null),void c([]);try{const l={fromRow:t.row,fromCol:t.col,toRow:r,toCol:n};console.log(\"Sending move to API:\",l);const p=await fetch(\"\".concat(i,\"/games/\").concat(o.gameId),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\",body:JSON.stringify(l)});if(!p.ok){const o=await p.json();throw console.error(\"API Error:\",{status:p.status,statusText:p.statusText,errorData:o}),new Error(o.error||\"Invalid move\")}const m=await p.json();console.log(\"Move successful:\",m),e(m),m.hasMoreJumps?(a({row:r,col:n,piece:m.board[r][n]}),c(u(r,n))):(a(null),c([]));const g=(()=>{const o=d(\"r\"),e=d(\"b\");return console.log(\"Piece count:\",{red:o,black:e}),0===o?\"black\":0===e?\"red\":null})();g&&e(o=>Object(s.a)(Object(s.a)({},o),{},{status:\"finished\",winner:g}))}catch(w){console.error(\"Error making move:\",w),alert(w instanceof Error?w.message:\"Invalid move. Please try again.\"),a(null),c([])}};return n.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\",textAlign:\"center\"}},n.a.createElement(\"h1\",null,\"Checkers Game\"),n.a.createElement(\"div\",{className:\"game-status\",style:{fontSize:\"1.5em\",marginBottom:\"20px\",fontWeight:\"bold\",color:\"finished\"===o.status?\"#4CAF50\":\"#2196F3\"}},\"finished\"===o.status&&o.winner?\"Game Over - \".concat(o.winner.charAt(0).toUpperCase()+o.winner.slice(1),\" Wins!\"):\"Current Turn: \".concat(o.currentPlayer.charAt(0).toUpperCase()+o.currentPlayer.slice(1))),n.a.createElement(\"div\",{className:\"game-board\",style:{display:\"inline-block\",border:\"2px solid #333\",backgroundColor:\"#fff\"}},o.board.map((o,e)=>n.a.createElement(\"div\",{key:e,className:\"board-row\",style:{display:\"flex\"}},o.map((o,r)=>{const a=(e+r)%2===0,s=(null===t||void 0===t?void 0:t.row)===e&&(null===t||void 0===t?void 0:t.col)===r,c=l.some(o=>o.row===e&&o.col===r);return n.a.createElement(\"div\",{key:r,onClick:()=>p(e,r),style:{width:\"60px\",height:\"60px\",backgroundColor:a?\"#666\":\"#fff\",border:s?\"3px solid yellow\":\"1px solid #999\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",cursor:\"pointer\",position:\"relative\",boxSizing:\"border-box\"}},o&&n.a.createElement(\"div\",{style:{width:\"80%\",height:\"80%\",borderRadius:\"50%\",backgroundColor:\"r\"===o.toLowerCase()?\"#ff4444\":\"#333\",border:\"2px solid #fff\",boxShadow:\"0 0 10px rgba(0,0,0,0.3)\",position:\"relative\"}},o===o.toUpperCase()&&n.a.createElement(\"div\",{style:{position:\"absolute\",top:\"50%\",left:\"50%\",transform:\"translate(-50%, -50%)\",color:\"r\"===o.toLowerCase()?\"#ffcccc\":\"#666\",fontSize:\"24px\"}},\"\\u2654\")),c&&n.a.createElement(\"div\",{style:{position:\"absolute\",width:\"20px\",height:\"20px\",borderRadius:\"50%\",backgroundColor:\"rgba(0, 255, 0, 0.5)\",border:\"2px solid rgba(0, 255, 0, 0.8)\"}}))})))),n.a.createElement(\"div\",{style:{marginTop:\"20px\"}},n.a.createElement(\"button\",{onClick:async()=>{try{const t=await fetch(\"\".concat(i,\"/games\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\"});if(!t.ok)throw new Error(\"Failed to create game\");const r=await t.json();if(console.log(\"API Response:\",r),\"string\"===typeof r){const o=JSON.parse(r);console.log(\"Parsed new game state:\",o),e(o)}else console.log(\"Setting game state directly:\",r),e(r);a(null),c([])}catch(o){console.error(\"Error creating game:\",o),alert(\"Failed to create new game. Please try again.\")}},style:{padding:\"10px 20px\",fontSize:\"16px\",backgroundColor:\"#4CAF50\",color:\"white\",border:\"none\",borderRadius:\"4px\",cursor:\"pointer\",marginBottom:\"20px\"}},\"finished\"===o.status?\"Play Again\":o.gameId?\"Restart Game\":\"New Game\")))};l.a.createRoot(document.getElementById(\"root\")).render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(c,null)))},4:function(o,e,t){o.exports=t(13)}},[[4,1,2]]]);","extractedComments":[]}