{"map":"{\"version\":3,\"sources\":[\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/App.tsx\",\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/index.tsx\"],\"names\":[\"App\",\"game\",\"setGame\",\"useState\",\"selectedSquare\",\"setSelectedSquare\",\"validMoves\",\"setValidMoves\",\"jumpingPiece\",\"setJumpingPiece\",\"apiEndpoint\",\"countPieces\",\"color\",\"count\",\"row\",\"col\",\"piece\",\"board\",\"toLowerCase\",\"calculateValidMoves\",\"console\",\"log\",\"isKing\",\"toUpperCase\",\"isBlackSquare\",\"moves\",\"directions\",\"push\",\"includes\",\"jumps\",\"rowDir\",\"colDir\",\"_game$board$jumpedRow\",\"jumpedRow\",\"jumpedCol\",\"newRow\",\"newCol\",\"from\",\"over\",\"to\",\"jumpedPiece\",\"isOpponentPiece\",\"length\",\"sum\",\"handleMove\",\"async\",\"toRow\",\"toCol\",\"response\",\"fetch\",\"concat\",\"gameId\",\"method\",\"headers\",\"Content-Type\",\"body\",\"JSON\",\"stringify\",\"fromRow\",\"fromCol\",\"ok\",\"Error\",\"updatedGame\",\"json\",\"Math\",\"abs\",\"additionalJumps\",\"filter\",\"move\",\"winner\",\"checkWinner\",\"redPieces\",\"blackPieces\",\"red\",\"black\",\"prev\",\"_objectSpread\",\"status\",\"error\",\"React\",\"createElement\",\"className\",\"style\",\"padding\",\"textAlign\",\"fontSize\",\"marginBottom\",\"fontWeight\",\"charAt\",\"slice\",\"currentPlayer\",\"display\",\"border\",\"backgroundColor\",\"map\",\"rowIndex\",\"key\",\"colIndex\",\"isSelected\",\"isValidMove\",\"some\",\"onClick\",\"handleSquareClick\",\"width\",\"height\",\"justifyContent\",\"alignItems\",\"cursor\",\"position\",\"boxSizing\",\"borderRadius\",\"boxShadow\",\"top\",\"left\",\"transform\",\"marginTop\",\"Accept\",\"mode\",\"data\",\"newGame\",\"parse\",\"alert\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\n\\ninterface GameState {\\n  gameId: string;\\n  board: string[][];\\n  currentPlayer: 'red' | 'black';\\n  status: 'active' | 'finished';\\n  winner?: string;\\n  createdAt: string;\\n  updatedAt: string;\\n  hasMoreJumps?: boolean;\\n}\\n\\ninterface Square {\\n  row: number;\\n  col: number;\\n  piece: string;\\n}\\n\\ninterface Move {\\n  row: number;\\n  col: number;\\n}\\n\\nfunction App() {\\n  const [game, setGame] = useState<GameState | null>(null);\\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\\n  const [jumpingPiece, setJumpingPiece] = useState<Square | null>(null);\\n  const apiEndpoint = 'https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod';\\n\\n  const getGameStatus = () => {\\n    if (!game) {\\n      return \\\"Click 'New Game' to start playing!\\\";\\n    }\\n    if (game.status === 'finished') {\\n      return `Game Over! ${game.winner?.toUpperCase()} wins! ðŸŽ‰`;\\n    }\\n    return `Current Turn: ${game.currentPlayer.toUpperCase()}`;\\n  };\\n\\n  const createNewGame = async () => {\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors'\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to create game');\\n      }\\n\\n      const data = await response.json();\\n      console.log('API Response:', data);\\n      \\n      if (typeof data === 'string') {\\n        const newGame = JSON.parse(data);\\n        console.log('Parsed new game state:', newGame);\\n        setGame(newGame);\\n      } else {\\n        console.log('Setting game state directly:', data);\\n        setGame(data);\\n      }\\n      \\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error creating game:', error);\\n      alert('Failed to create new game. Please try again.');\\n    }\\n  };\\n\\n  const countPieces = (color: 'r' | 'b'): number => {\\n    let count = 0;\\n    for (let row = 0; row < 8; row++) {\\n      for (let col = 0; col < 8; col++) {\\n        const piece = game?.board[row][col];\\n        if (piece && piece.toLowerCase() === color) {\\n          count++;\\n        }\\n      }\\n    }\\n    return count;\\n  };\\n\\n  const checkWinner = (): string | null => {\\n    const redPieces = countPieces('r');\\n    const blackPieces = countPieces('b');\\n\\n    console.log('Piece count:', { red: redPieces, black: blackPieces });\\n\\n    if (redPieces === 0) return 'black';\\n    if (blackPieces === 0) return 'red';\\n    return null;\\n  };\\n\\n  const calculateValidMoves = (row: number, col: number): Move[] => {\\n    if (!game) return [];\\n    \\n    const piece = game.board[row][col];\\n    if (!piece) return [];\\n\\n    console.log('Calculating moves for piece:', {\\n      row,\\n      col,\\n      piece,\\n      isKing: piece === piece.toUpperCase(),\\n      isBlackSquare: (row + col) % 2 === 0\\n    });\\n    \\n    const isKing = piece === piece.toUpperCase();\\n    const moves: Move[] = [];\\n\\n    // Determine valid directions based on piece type and color\\n    const directions: number[] = [];\\n    if (piece.toLowerCase() === 'r') {\\n      directions.push(-1); // Red pieces move up\\n    } else if (piece.toLowerCase() === 'b') {\\n      directions.push(1);  // Black pieces move down\\n    }\\n    if (isKing) {\\n      // Kings can move both up and down\\n      if (!directions.includes(-1)) directions.push(-1);\\n      if (!directions.includes(1)) directions.push(1);\\n    }\\n\\n    console.log('Movement directions:', directions);\\n\\n    // First check for jumps (these are mandatory)\\n    const jumps: Move[] = [];\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const jumpedRow = row + rowDir;\\n        const jumpedCol = col + colDir;\\n        const newRow = row + (rowDir * 2);\\n        const newCol = col + (colDir * 2);\\n\\n        console.log('Checking jump:', {\\n          from: { row, col },\\n          over: { row: jumpedRow, col: jumpedCol, piece: game?.board[jumpedRow]?.[jumpedCol] },\\n          to: { row: newRow, col: newCol },\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Check if jump is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Jump out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if there's an opponent's piece to jump over\\n        const jumpedPiece = game?.board[jumpedRow][jumpedCol];\\n        if (!jumpedPiece) {\\n          console.log('No piece to jump over');\\n          continue;\\n        }\\n        \\n        // Check if landing square is empty\\n        if (game?.board[newRow][newCol]) {\\n          console.log('Landing square occupied');\\n          continue;\\n        }\\n        \\n        const isOpponentPiece = \\n          (piece.toLowerCase() === 'r' && jumpedPiece.toLowerCase() === 'b') ||\\n          (piece.toLowerCase() === 'b' && jumpedPiece.toLowerCase() === 'r');\\n\\n        console.log('Jump validation:', {\\n          isOpponentPiece,\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Only allow jumps over opponent's pieces to black squares\\n        if (isOpponentPiece && (newRow + newCol) % 2 === 0) {\\n          jumps.push({ row: newRow, col: newCol });\\n          console.log('Valid jump found:', { row: newRow, col: newCol });\\n        }\\n      }\\n    }\\n\\n    // If there are jumps available, they are mandatory\\n    if (jumps.length > 0) {\\n      console.log('Mandatory jumps found:', jumps);\\n      return jumps;\\n    }\\n\\n    // If no jumps are available, check for regular moves\\n    for (const rowDir of directions) {\\n      for (const colDir of [-1, 1]) { // Left and right\\n        const newRow = row + rowDir;\\n        const newCol = col + colDir;\\n\\n        console.log('Checking regular move:', {\\n          from: { row, col },\\n          to: { row: newRow, col: newCol },\\n          isBlackSquare: (newRow + newCol) % 2 === 0\\n        });\\n\\n        // Check if move is within bounds\\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\\n          console.log('Move out of bounds');\\n          continue;\\n        }\\n        \\n        // Check if destination square is empty\\n        if (game?.board[newRow][newCol]) {\\n          console.log('Destination square occupied');\\n          continue;\\n        }\\n\\n        // Only allow moves to black squares\\n        const isBlackSquare = (newRow + newCol) % 2 === 0;\\n        console.log('Square color check:', {\\n          newRow,\\n          newCol,\\n          sum: newRow + newCol,\\n          isBlackSquare\\n        });\\n\\n        if (isBlackSquare) {\\n          moves.push({ row: newRow, col: newCol });\\n          console.log('Valid move found:', { row: newRow, col: newCol });\\n        } else {\\n          console.log('Not a black square');\\n        }\\n      }\\n    }\\n\\n    console.log('Final valid moves:', moves);\\n    return moves;\\n  };\\n\\n  const handleSquareClick = (row: number, col: number) => {\\n    if (!game) return;\\n\\n    const piece = game.board[row][col];\\n    console.log('Clicked square:', { row, col, piece });\\n    console.log('Game state:', { currentPlayer: game.currentPlayer, selectedSquare, validMoves });\\n\\n    // If there's a jumping piece, only allow that piece to move\\n    if (jumpingPiece && (row !== jumpingPiece.row || col !== jumpingPiece.col) && piece?.toLowerCase() === game.currentPlayer[0]) {\\n      console.log('Must continue jump with piece at:', jumpingPiece);\\n      return;\\n    }\\n\\n    // If it's a piece of the current player's color\\n    if (piece && piece.toLowerCase() === game.currentPlayer[0]) {\\n      setSelectedSquare({ row, col, piece });\\n      const moves = calculateValidMoves(row, col);\\n      setValidMoves(moves);\\n      console.log('Calculated valid moves:', moves);\\n    }\\n    // If it's a valid move for the selected piece\\n    else if (selectedSquare && validMoves.some(move => move.row === row && move.col === col)) {\\n      handleMove(row, col);\\n    }\\n    // Deselect if clicking elsewhere\\n    else {\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    }\\n  };\\n\\n  const handleMove = async (toRow: number, toCol: number) => {\\n    if (!selectedSquare || !game) return;\\n\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\\n        method: 'PUT',\\n        headers: {\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({\\n          fromRow: selectedSquare.row,\\n          fromCol: selectedSquare.col,\\n          toRow,\\n          toCol\\n        }),\\n      });\\n\\n      if (!response.ok) {\\n        throw new Error('Failed to make move');\\n      }\\n\\n      const updatedGame = await response.json();\\n      setGame(updatedGame);\\n\\n      // Check if this was a jump move\\n      const isJump = Math.abs(toRow - selectedSquare.row) === 2;\\n\\n      if (isJump) {\\n        // Check for additional jumps from the new position\\n        const additionalJumps = calculateValidMoves(toRow, toCol).filter(move => \\n          Math.abs(move.row - toRow) === 2\\n        );\\n\\n        if (additionalJumps.length > 0) {\\n          // If there are more jumps available, keep the piece selected\\n          setSelectedSquare({ row: toRow, col: toCol, piece: game.board[selectedSquare.row][selectedSquare.col] });\\n          setValidMoves(additionalJumps);\\n          setJumpingPiece({ row: toRow, col: toCol, piece: game.board[selectedSquare.row][selectedSquare.col] });\\n          return;\\n        }\\n      }\\n\\n      // If no additional jumps or not a jump move, clear selection\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      setJumpingPiece(null);\\n\\n      // Check for winner after move\\n      const winner = checkWinner();\\n      if (winner) {\\n        setGame(prev => ({\\n          ...prev,\\n          status: 'finished',\\n          winner: winner\\n        }));\\n      }\\n    } catch (error) {\\n      console.error('Error making move:', error);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\" style={{ padding: '20px', textAlign: 'center' }}>\\n      <h1>Checkers Game</h1>\\n      <div className=\\\"game-status\\\" style={{ \\n        fontSize: '1.5em', \\n        marginBottom: '20px',\\n        fontWeight: 'bold',\\n        color: game?.status === 'finished' ? '#4CAF50' : '#2196F3'\\n      }}>\\n        {game?.status === 'finished' && game.winner ? `Game Over - ${game.winner.charAt(0).toUpperCase() + game.winner.slice(1)} Wins!` : `Current Turn: ${game?.currentPlayer.charAt(0).toUpperCase() + game.currentPlayer.slice(1)}`}\\n      </div>\\n      <div className=\\\"game-board\\\" style={{\\n        display: 'inline-block',\\n        border: '2px solid #333',\\n        backgroundColor: '#fff'\\n      }}>\\n        {game?.board.map((row, rowIndex) => (\\n          <div key={rowIndex} className=\\\"board-row\\\" style={{\\n            display: 'flex'\\n          }}>\\n            {row.map((piece, colIndex) => {\\n              const isBlackSquare = (rowIndex + colIndex) % 2 === 0;\\n              const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\\n              const isValidMove = validMoves.some(move => move.row === rowIndex && move.col === colIndex);\\n              \\n              return (\\n                <div\\n                  key={colIndex}\\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\\n                  style={{\\n                    width: '60px',\\n                    height: '60px',\\n                    backgroundColor: isBlackSquare ? '#666' : '#fff',\\n                    border: isSelected ? '3px solid yellow' : '1px solid #999',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center',\\n                    cursor: 'pointer',\\n                    position: 'relative',\\n                    boxSizing: 'border-box'\\n                  }}\\n                >\\n                  {piece && (\\n                    <div style={{\\n                      width: '80%',\\n                      height: '80%',\\n                      borderRadius: '50%',\\n                      backgroundColor: piece.toLowerCase() === 'r' ? '#ff4444' : '#333',\\n                      border: '2px solid #fff',\\n                      boxShadow: '0 0 10px rgba(0,0,0,0.3)',\\n                      position: 'relative'\\n                    }}>\\n                      {piece === piece.toUpperCase() && (\\n                        <div style={{\\n                          position: 'absolute',\\n                          top: '50%',\\n                          left: '50%',\\n                          transform: 'translate(-50%, -50%)',\\n                          color: piece.toLowerCase() === 'r' ? '#ffcccc' : '#666',\\n                          fontSize: '24px'\\n                        }}>\\n                          â™”\\n                        </div>\\n                      )}\\n                    </div>\\n                  )}\\n                  {isValidMove && (\\n                    <div style={{\\n                      position: 'absolute',\\n                      width: '20px',\\n                      height: '20px',\\n                      borderRadius: '50%',\\n                      backgroundColor: 'rgba(0, 255, 0, 0.5)',\\n                      border: '2px solid rgba(0, 255, 0, 0.8)'\\n                    }} />\\n                  )}\\n                </div>\\n              );\\n            })}\\n          </div>\\n        ))}\\n      </div>\\n      <div style={{ marginTop: '20px' }}>\\n        <button \\n          onClick={createNewGame}\\n          style={{\\n            padding: '10px 20px',\\n            fontSize: '16px',\\n            backgroundColor: '#4CAF50',\\n            color: 'white',\\n            border: 'none',\\n            borderRadius: '4px',\\n            cursor: 'pointer',\\n            marginBottom: '20px'\\n          }}\\n        >\\n          {game?.status === 'finished' ? 'Play Again' : game.gameId ? 'Restart Game' : 'New Game'}\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(o,e,t){\"use strict\";t.r(e);var r=t(0),n=t.n(r),l=t(3),a=t.n(l),c=t(1);var s=function(){const[o,e]=Object(r.useState)(null),[t,l]=Object(r.useState)(null),[a,s]=Object(r.useState)([]),[i,d]=Object(r.useState)(null),u=\"https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod\",p=e=>{let t=0;for(let r=0;r<8;r++)for(let n=0;n<8;n++){const l=null===o||void 0===o?void 0:o.board[r][n];l&&l.toLowerCase()===e&&t++}return t},m=(e,t)=>{if(!o)return[];const r=o.board[e][t];if(!r)return[];console.log(\"Calculating moves for piece:\",{row:e,col:t,piece:r,isKing:r===r.toUpperCase(),isBlackSquare:(e+t)%2===0});const n=r===r.toUpperCase(),l=[],a=[];\"r\"===r.toLowerCase()?a.push(-1):\"b\"===r.toLowerCase()&&a.push(1),n&&(a.includes(-1)||a.push(-1),a.includes(1)||a.push(1)),console.log(\"Movement directions:\",a);const c=[];for(const i of a)for(const n of[-1,1]){var s;const l=e+i,a=t+n,d=e+2*i,u=t+2*n;if(console.log(\"Checking jump:\",{from:{row:e,col:t},over:{row:l,col:a,piece:null===o||void 0===o?void 0:null===(s=o.board[l])||void 0===s?void 0:s[a]},to:{row:d,col:u},isBlackSquare:(d+u)%2===0}),d<0||d>7||u<0||u>7){console.log(\"Jump out of bounds\");continue}const p=null===o||void 0===o?void 0:o.board[l][a];if(!p){console.log(\"No piece to jump over\");continue}if(null===o||void 0===o?void 0:o.board[d][u]){console.log(\"Landing square occupied\");continue}const m=\"r\"===r.toLowerCase()&&\"b\"===p.toLowerCase()||\"b\"===r.toLowerCase()&&\"r\"===p.toLowerCase();console.log(\"Jump validation:\",{isOpponentPiece:m,isBlackSquare:(d+u)%2===0}),m&&(d+u)%2===0&&(c.push({row:d,col:u}),console.log(\"Valid jump found:\",{row:d,col:u}))}if(c.length>0)return console.log(\"Mandatory jumps found:\",c),c;for(const i of a)for(const r of[-1,1]){const n=e+i,a=t+r;if(console.log(\"Checking regular move:\",{from:{row:e,col:t},to:{row:n,col:a},isBlackSquare:(n+a)%2===0}),n<0||n>7||a<0||a>7){console.log(\"Move out of bounds\");continue}if(null===o||void 0===o?void 0:o.board[n][a]){console.log(\"Destination square occupied\");continue}const c=(n+a)%2===0;console.log(\"Square color check:\",{newRow:n,newCol:a,sum:n+a,isBlackSquare:c}),c?(l.push({row:n,col:a}),console.log(\"Valid move found:\",{row:n,col:a})):console.log(\"Not a black square\")}return console.log(\"Final valid moves:\",l),l},f=async(r,n)=>{if(t&&o)try{const i=await fetch(\"\".concat(u,\"/games/\").concat(o.gameId),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({fromRow:t.row,fromCol:t.col,toRow:r,toCol:n})});if(!i.ok)throw new Error(\"Failed to make move\");const f=await i.json();if(e(f),2===Math.abs(r-t.row)){const e=m(r,n).filter(o=>2===Math.abs(o.row-r));if(e.length>0)return l({row:r,col:n,piece:o.board[t.row][t.col]}),s(e),void d({row:r,col:n,piece:o.board[t.row][t.col]})}l(null),s([]),d(null);const g=(()=>{const o=p(\"r\"),e=p(\"b\");return console.log(\"Piece count:\",{red:o,black:e}),0===o?\"black\":0===e?\"red\":null})();g&&e(o=>Object(c.a)(Object(c.a)({},o),{},{status:\"finished\",winner:g}))}catch(a){console.error(\"Error making move:\",a)}};return n.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\",textAlign:\"center\"}},n.a.createElement(\"h1\",null,\"Checkers Game\"),n.a.createElement(\"div\",{className:\"game-status\",style:{fontSize:\"1.5em\",marginBottom:\"20px\",fontWeight:\"bold\",color:\"finished\"===(null===o||void 0===o?void 0:o.status)?\"#4CAF50\":\"#2196F3\"}},\"finished\"===(null===o||void 0===o?void 0:o.status)&&o.winner?\"Game Over - \".concat(o.winner.charAt(0).toUpperCase()+o.winner.slice(1),\" Wins!\"):\"Current Turn: \".concat((null===o||void 0===o?void 0:o.currentPlayer.charAt(0).toUpperCase())+o.currentPlayer.slice(1))),n.a.createElement(\"div\",{className:\"game-board\",style:{display:\"inline-block\",border:\"2px solid #333\",backgroundColor:\"#fff\"}},null===o||void 0===o?void 0:o.board.map((e,r)=>n.a.createElement(\"div\",{key:r,className:\"board-row\",style:{display:\"flex\"}},e.map((e,c)=>{const d=(r+c)%2===0,u=(null===t||void 0===t?void 0:t.row)===r&&(null===t||void 0===t?void 0:t.col)===c,p=a.some(o=>o.row===r&&o.col===c);return n.a.createElement(\"div\",{key:c,onClick:()=>((e,r)=>{if(!o)return;const n=o.board[e][r];if(console.log(\"Clicked square:\",{row:e,col:r,piece:n}),console.log(\"Game state:\",{currentPlayer:o.currentPlayer,selectedSquare:t,validMoves:a}),!i||e===i.row&&r===i.col||(null===n||void 0===n?void 0:n.toLowerCase())!==o.currentPlayer[0])if(n&&n.toLowerCase()===o.currentPlayer[0]){l({row:e,col:r,piece:n});const o=m(e,r);s(o),console.log(\"Calculated valid moves:\",o)}else t&&a.some(o=>o.row===e&&o.col===r)?f(e,r):(l(null),s([]));else console.log(\"Must continue jump with piece at:\",i)})(r,c),style:{width:\"60px\",height:\"60px\",backgroundColor:d?\"#666\":\"#fff\",border:u?\"3px solid yellow\":\"1px solid #999\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",cursor:\"pointer\",position:\"relative\",boxSizing:\"border-box\"}},e&&n.a.createElement(\"div\",{style:{width:\"80%\",height:\"80%\",borderRadius:\"50%\",backgroundColor:\"r\"===e.toLowerCase()?\"#ff4444\":\"#333\",border:\"2px solid #fff\",boxShadow:\"0 0 10px rgba(0,0,0,0.3)\",position:\"relative\"}},e===e.toUpperCase()&&n.a.createElement(\"div\",{style:{position:\"absolute\",top:\"50%\",left:\"50%\",transform:\"translate(-50%, -50%)\",color:\"r\"===e.toLowerCase()?\"#ffcccc\":\"#666\",fontSize:\"24px\"}},\"\\u2654\")),p&&n.a.createElement(\"div\",{style:{position:\"absolute\",width:\"20px\",height:\"20px\",borderRadius:\"50%\",backgroundColor:\"rgba(0, 255, 0, 0.5)\",border:\"2px solid rgba(0, 255, 0, 0.8)\"}}))})))),n.a.createElement(\"div\",{style:{marginTop:\"20px\"}},n.a.createElement(\"button\",{onClick:async()=>{try{const t=await fetch(\"\".concat(u,\"/games\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\"});if(!t.ok)throw new Error(\"Failed to create game\");const r=await t.json();if(console.log(\"API Response:\",r),\"string\"===typeof r){const o=JSON.parse(r);console.log(\"Parsed new game state:\",o),e(o)}else console.log(\"Setting game state directly:\",r),e(r);l(null),s([])}catch(o){console.error(\"Error creating game:\",o),alert(\"Failed to create new game. Please try again.\")}},style:{padding:\"10px 20px\",fontSize:\"16px\",backgroundColor:\"#4CAF50\",color:\"white\",border:\"none\",borderRadius:\"4px\",cursor:\"pointer\",marginBottom:\"20px\"}},\"finished\"===(null===o||void 0===o?void 0:o.status)?\"Play Again\":o.gameId?\"Restart Game\":\"New Game\")))};a.a.createRoot(document.getElementById(\"root\")).render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(s,null)))},4:function(o,e,t){o.exports=t(13)}},[[4,1,2]]]);","extractedComments":[]}