{"map":"{\"version\":3,\"sources\":[\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/App.tsx\",\"C:/Users/kevin/OneDrive/Documents/Projects/AWS/CheckersGame/frontend/src/index.tsx\"],\"names\":[\"App\",\"game\",\"setGame\",\"useState\",\"selectedSquare\",\"setSelectedSquare\",\"validMoves\",\"setValidMoves\",\"apiEndpoint\",\"handleSquareClick\",\"async\",\"row\",\"col\",\"_game$board\",\"_game$board$row\",\"gameId\",\"status\",\"piece\",\"board\",\"console\",\"log\",\"currentPlayer\",\"toLowerCase\",\"alert\",\"moves\",\"calculateValidMoves\",\"fromRow\",\"fromCol\",\"isKing\",\"rowDirections\",\"push\",\"rowDir\",\"colDir\",\"newRow\",\"newCol\",\"jumpRow\",\"jumpCol\",\"midRow\",\"midCol\",\"jumpedPiece\",\"over\",\"length\",\"isValidDestination\",\"some\",\"move\",\"targetSquare\",\"moveData\",\"toRow\",\"toCol\",\"response\",\"fetch\",\"concat\",\"method\",\"headers\",\"Content-Type\",\"Accept\",\"mode\",\"body\",\"JSON\",\"stringify\",\"ok\",\"errorData\",\"json\",\"error\",\"statusText\",\"Error\",\"responseData\",\"message\",\"React\",\"createElement\",\"className\",\"style\",\"padding\",\"textAlign\",\"onClick\",\"newGame\",\"fontSize\",\"backgroundColor\",\"color\",\"border\",\"borderRadius\",\"cursor\",\"marginBottom\",\"display\",\"map\",\"rowIndex\",\"key\",\"colIndex\",\"isSelected\",\"isDarkSquare\",\"isValidMove\",\"width\",\"height\",\"justifyContent\",\"alignItems\",\"userSelect\",\"position\",\"renderPiece\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\n\\ninterface GameState {\\n  gameId?: string;\\n  board?: string[][];\\n  currentPlayer?: 'red' | 'black';\\n  status?: 'waiting' | 'in_progress' | 'finished';\\n}\\n\\ninterface Square {\\n  row: number;\\n  col: number;\\n  piece: string;\\n}\\n\\nfunction App() {\\n  const [game, setGame] = useState<GameState>({});\\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\\n  const [validMoves, setValidMoves] = useState<{row: number, col: number}[]>([]);\\n  const apiEndpoint = 'https://rd2ll5az83.execute-api.us-east-1.amazonaws.com/prod';\\n\\n  const createNewGame = async () => {\\n    try {\\n      const response = await fetch(`${apiEndpoint}/games`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors'\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to create game');\\n      }\\n\\n      const newGame = await response.json();\\n      console.log('New game state:', newGame);\\n      setGame(newGame);\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error creating game:', error);\\n      alert('Failed to create new game. Please try again.');\\n    }\\n  };\\n\\n  const calculateValidMoves = (fromRow: number, fromCol: number): {row: number, col: number}[] => {\\n    if (!game.board) return [];\\n\\n    const piece = game.board[fromRow][fromCol];\\n    if (!piece) return [];\\n\\n    console.log('Calculating moves for piece:', {\\n      piece,\\n      fromRow,\\n      fromCol,\\n      currentPlayer: game.currentPlayer\\n    });\\n\\n    const isKing = piece === 'R' || piece === 'B';\\n    const moves: {row: number, col: number}[] = [];\\n\\n    // Determine valid directions based on piece type\\n    let rowDirections: number[] = [];\\n    if (piece.toLowerCase() === 'r') {\\n      rowDirections.push(-1); // Red moves up\\n      if (isKing) rowDirections.push(1); // Kings can move down\\n    } else {\\n      rowDirections.push(1);  // Black moves down\\n      if (isKing) rowDirections.push(-1); // Kings can move up\\n    }\\n\\n    console.log('Valid row directions:', rowDirections);\\n\\n    // Check regular moves (one square)\\n    for (const rowDir of rowDirections) {\\n      for (const colDir of [-1, 1]) {  // Can move diagonally left or right\\n        const newRow = fromRow + rowDir;\\n        const newCol = fromCol + colDir;\\n\\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\\n          if (!game.board[newRow][newCol]) {  // Square is empty\\n            console.log('Found valid regular move:', { newRow, newCol });\\n            moves.push({ row: newRow, col: newCol });\\n          }\\n        }\\n      }\\n    }\\n\\n    // Check jump moves (two squares)\\n    for (const rowDir of rowDirections) {\\n      for (const colDir of [-1, 1]) {\\n        const jumpRow = fromRow + (rowDir * 2);\\n        const jumpCol = fromCol + (colDir * 2);\\n        const midRow = fromRow + rowDir;\\n        const midCol = fromCol + colDir;\\n\\n        if (jumpRow >= 0 && jumpRow < 8 && jumpCol >= 0 && jumpCol < 8) {\\n          const jumpedPiece = game.board[midRow][midCol];\\n          const targetSquare = game.board[jumpRow][jumpCol];\\n\\n          // Check if we're jumping over an opponent's piece to an empty square\\n          if (!targetSquare && jumpedPiece && \\n              ((game.currentPlayer === 'red' && jumpedPiece.toLowerCase() === 'b') ||\\n               (game.currentPlayer === 'black' && jumpedPiece.toLowerCase() === 'r'))) {\\n            console.log('Found valid jump move:', { jumpRow, jumpCol, over: { midRow, midCol } });\\n            moves.push({ row: jumpRow, col: jumpCol });\\n          }\\n        }\\n      }\\n    }\\n\\n    console.log('All valid moves:', moves);\\n    return moves;\\n  };\\n\\n  const handleSquareClick = async (row: number, col: number) => {\\n    if (!game.gameId || game.status === 'finished') return;\\n    \\n    const piece = game.board?.[row]?.[col];\\n    console.log('Clicked square:', {row, col, piece});\\n    console.log('Game state:', {\\n      currentPlayer: game.currentPlayer,\\n      selectedSquare,\\n      validMoves\\n    });\\n\\n    // First click - selecting a piece\\n    if (!selectedSquare) {\\n      if (!piece) {\\n        console.log('Clicked empty square');\\n        return;\\n      }\\n\\n      const isCurrentPlayersPiece = \\n        (game.currentPlayer === 'red' && piece.toLowerCase() === 'r') ||\\n        (game.currentPlayer === 'black' && piece.toLowerCase() === 'b');\\n\\n      if (!isCurrentPlayersPiece) {\\n        alert(\\\"You can only move your own pieces!\\\");\\n        return;\\n      }\\n\\n      const moves = calculateValidMoves(row, col);\\n      console.log('Calculated valid moves:', moves);\\n      \\n      if (moves.length === 0) {\\n        alert(\\\"This piece has no valid moves!\\\");\\n        return;\\n      }\\n\\n      setSelectedSquare({ row, col, piece });\\n      setValidMoves(moves);\\n      return;\\n    }\\n\\n    // Second click - making a move\\n    if (selectedSquare.row === row && selectedSquare.col === col) {\\n      console.log('Deselecting piece');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    // Check if this is a valid move\\n    const isValidDestination = validMoves.some(move => move.row === row && move.col === col);\\n    console.log('Move validation:', {\\n      isValidDestination,\\n      selectedSquare,\\n      targetSquare: {row, col}\\n    });\\n\\n    if (!isValidDestination) {\\n      console.log('Invalid move - not in valid moves list');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n      return;\\n    }\\n\\n    try {\\n      const moveData = {\\n        fromRow: selectedSquare.row,\\n        fromCol: selectedSquare.col,\\n        toRow: row,\\n        toCol: col\\n      };\\n      console.log('Sending move to API:', moveData);\\n\\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\\n        method: 'PUT',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          'Accept': 'application/json'\\n        },\\n        mode: 'cors',\\n        body: JSON.stringify(moveData)\\n      });\\n\\n      if (!response.ok) {\\n        const errorData = await response.json();\\n        console.error('API Error:', {\\n          status: response.status,\\n          statusText: response.statusText,\\n          errorData\\n        });\\n        throw new Error(errorData.error || 'Invalid move');\\n      }\\n\\n      const responseData = await response.json();\\n      console.log('Move successful:', responseData);\\n      \\n      setGame(responseData);\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    } catch (error) {\\n      console.error('Error making move:', error);\\n      alert(error instanceof Error ? error.message : 'Invalid move. Please try again.');\\n      setSelectedSquare(null);\\n      setValidMoves([]);\\n    }\\n  };\\n\\n  const renderPiece = (piece: string) => {\\n    if (piece === 'r') return '🔴';\\n    if (piece === 'b') return '⚫';\\n    if (piece === 'R') return '👑🔴';\\n    if (piece === 'B') return '👑⚫';\\n    return '';\\n  };\\n\\n  const renderBoard = () => {\\n    if (!game.board) return null;\\n\\n    return (\\n      <div>\\n        <div style={{ \\n          display: 'inline-block',\\n          border: '2px solid #333',\\n          borderRadius: '4px',\\n          padding: '10px',\\n          backgroundColor: '#ddd'\\n        }}>\\n          {game.board.map((row, rowIndex) => (\\n            <div key={rowIndex} style={{ display: 'flex' }}>\\n              {row.map((piece, colIndex) => {\\n                const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\\n                const isDarkSquare = (rowIndex + colIndex) % 2 === 1;\\n                const isValidMove = validMoves.some(move => \\n                  move.row === rowIndex && move.col === colIndex\\n                );\\n\\n                return (\\n                  <div\\n                    key={`${rowIndex}-${colIndex}`}\\n                    onClick={() => handleSquareClick(rowIndex, colIndex)}\\n                    style={{\\n                      width: '60px',\\n                      height: '60px',\\n                      backgroundColor: isSelected ? '#90EE90' : \\n                                    isValidMove ? '#98FB98' :\\n                                    isDarkSquare ? '#666' : '#fff',\\n                      display: 'flex',\\n                      justifyContent: 'center',\\n                      alignItems: 'center',\\n                      fontSize: '40px',\\n                      cursor: 'pointer',\\n                      userSelect: 'none',\\n                      border: isSelected ? '2px solid #32CD32' : 'none',\\n                      position: 'relative'\\n                    }}\\n                  >\\n                    {renderPiece(piece)}\\n                  </div>\\n                );\\n              })}\\n            </div>\\n          ))}\\n        </div>\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\" style={{ padding: '20px', textAlign: 'center' }}>\\n      <h1>Checkers Game</h1>\\n      \\n      <button \\n        onClick={createNewGame}\\n        style={{\\n          padding: '10px 20px',\\n          fontSize: '16px',\\n          backgroundColor: '#4CAF50',\\n          color: 'white',\\n          border: 'none',\\n          borderRadius: '4px',\\n          cursor: 'pointer',\\n          marginBottom: '20px'\\n        }}\\n      >\\n        New Game\\n      </button>\\n\\n      {game.gameId && (\\n        <div>\\n          <p style={{ marginBottom: '10px' }}>\\n            <strong>Game ID:</strong> {game.gameId} | \\n            <strong> Status:</strong> {game.status} |\\n            <strong> Current Player:</strong> {game.currentPlayer}\\n          </p>\\n          {renderBoard()}\\n        </div>\\n      )}\\n\\n      {!game.gameId && (\\n        <div>Click \\\"New Game\\\" to start playing!</div>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,o,t){\"use strict\";t.r(o);var r=t(0),n=t.n(r),a=t(2);var l=function(){const[e,o]=Object(r.useState)({}),[t,a]=Object(r.useState)(null),[l,c]=Object(r.useState)([]),s=\"https://rd2ll5az83.execute-api.us-east-1.amazonaws.com/prod\",i=async(r,n)=>{var i,d;if(!e.gameId||\"finished\"===e.status)return;const u=null===(i=e.board)||void 0===i?void 0:null===(d=i[r])||void 0===d?void 0:d[n];if(console.log(\"Clicked square:\",{row:r,col:n,piece:u}),console.log(\"Game state:\",{currentPlayer:e.currentPlayer,selectedSquare:t,validMoves:l}),!t){if(!u)return void console.log(\"Clicked empty square\");if(!(\"red\"===e.currentPlayer&&\"r\"===u.toLowerCase()||\"black\"===e.currentPlayer&&\"b\"===u.toLowerCase()))return void alert(\"You can only move your own pieces!\");const o=((o,t)=>{if(!e.board)return[];const r=e.board[o][t];if(!r)return[];console.log(\"Calculating moves for piece:\",{piece:r,fromRow:o,fromCol:t,currentPlayer:e.currentPlayer});const n=\"R\"===r||\"B\"===r,a=[];let l=[];\"r\"===r.toLowerCase()?(l.push(-1),n&&l.push(1)):(l.push(1),n&&l.push(-1)),console.log(\"Valid row directions:\",l);for(const c of l)for(const r of[-1,1]){const n=o+c,l=t+r;n>=0&&n<8&&l>=0&&l<8&&(e.board[n][l]||(console.log(\"Found valid regular move:\",{newRow:n,newCol:l}),a.push({row:n,col:l})))}for(const c of l)for(const r of[-1,1]){const n=o+2*c,l=t+2*r,s=o+c,i=t+r;if(n>=0&&n<8&&l>=0&&l<8){const o=e.board[s][i];!e.board[n][l]&&o&&(\"red\"===e.currentPlayer&&\"b\"===o.toLowerCase()||\"black\"===e.currentPlayer&&\"r\"===o.toLowerCase())&&(console.log(\"Found valid jump move:\",{jumpRow:n,jumpCol:l,over:{midRow:s,midCol:i}}),a.push({row:n,col:l}))}}return console.log(\"All valid moves:\",a),a})(r,n);return console.log(\"Calculated valid moves:\",o),0===o.length?void alert(\"This piece has no valid moves!\"):(a({row:r,col:n,piece:u}),void c(o))}if(t.row===r&&t.col===n)return console.log(\"Deselecting piece\"),a(null),void c([]);const m=l.some(e=>e.row===r&&e.col===n);if(console.log(\"Move validation:\",{isValidDestination:m,selectedSquare:t,targetSquare:{row:r,col:n}}),!m)return console.log(\"Invalid move - not in valid moves list\"),a(null),void c([]);try{const l={fromRow:t.row,fromCol:t.col,toRow:r,toCol:n};console.log(\"Sending move to API:\",l);const i=await fetch(\"\".concat(s,\"/games/\").concat(e.gameId),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\",body:JSON.stringify(l)});if(!i.ok){const e=await i.json();throw console.error(\"API Error:\",{status:i.status,statusText:i.statusText,errorData:e}),new Error(e.error||\"Invalid move\")}const d=await i.json();console.log(\"Move successful:\",d),o(d),a(null),c([])}catch(p){console.error(\"Error making move:\",p),alert(p instanceof Error?p.message:\"Invalid move. Please try again.\"),a(null),c([])}};return n.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\",textAlign:\"center\"}},n.a.createElement(\"h1\",null,\"Checkers Game\"),n.a.createElement(\"button\",{onClick:async()=>{try{const t=await fetch(\"\".concat(s,\"/games\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},mode:\"cors\"});if(!t.ok)throw new Error(\"Failed to create game\");const r=await t.json();console.log(\"New game state:\",r),o(r),a(null),c([])}catch(e){console.error(\"Error creating game:\",e),alert(\"Failed to create new game. Please try again.\")}},style:{padding:\"10px 20px\",fontSize:\"16px\",backgroundColor:\"#4CAF50\",color:\"white\",border:\"none\",borderRadius:\"4px\",cursor:\"pointer\",marginBottom:\"20px\"}},\"New Game\"),e.gameId&&n.a.createElement(\"div\",null,n.a.createElement(\"p\",{style:{marginBottom:\"10px\"}},n.a.createElement(\"strong\",null,\"Game ID:\"),\" \",e.gameId,\" |\",n.a.createElement(\"strong\",null,\" Status:\"),\" \",e.status,\" |\",n.a.createElement(\"strong\",null,\" Current Player:\"),\" \",e.currentPlayer),e.board?n.a.createElement(\"div\",null,n.a.createElement(\"div\",{style:{display:\"inline-block\",border:\"2px solid #333\",borderRadius:\"4px\",padding:\"10px\",backgroundColor:\"#ddd\"}},e.board.map((e,o)=>n.a.createElement(\"div\",{key:o,style:{display:\"flex\"}},e.map((e,r)=>{const a=(null===t||void 0===t?void 0:t.row)===o&&(null===t||void 0===t?void 0:t.col)===r,c=(o+r)%2===1,s=l.some(e=>e.row===o&&e.col===r);return n.a.createElement(\"div\",{key:\"\".concat(o,\"-\").concat(r),onClick:()=>i(o,r),style:{width:\"60px\",height:\"60px\",backgroundColor:a?\"#90EE90\":s?\"#98FB98\":c?\"#666\":\"#fff\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",fontSize:\"40px\",cursor:\"pointer\",userSelect:\"none\",border:a?\"2px solid #32CD32\":\"none\",position:\"relative\"}},(e=>\"r\"===e?\"\\ud83d\\udd34\":\"b\"===e?\"\\u26ab\":\"R\"===e?\"\\ud83d\\udc51\\ud83d\\udd34\":\"B\"===e?\"\\ud83d\\udc51\\u26ab\":\"\")(e))}))))):null),!e.gameId&&n.a.createElement(\"div\",null,'Click \"New Game\" to start playing!'))};t.n(a).a.createRoot(document.getElementById(\"root\")).render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(l,null)))},3:function(e,o,t){e.exports=t(12)}},[[3,1,2]]]);","extractedComments":[]}