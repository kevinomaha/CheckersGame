{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","game","setGame","useState","selectedSquare","setSelectedSquare","validMoves","setValidMoves","jumpingPiece","setJumpingPiece","apiEndpoint","countPieces","color","count","row","col","piece","board","toLowerCase","calculateValidMoves","console","log","isKing","toUpperCase","isBlackSquare","moves","directions","push","includes","jumps","rowDir","colDir","_game$board$jumpedRow","jumpedRow","jumpedCol","newRow","newCol","from","over","to","jumpedPiece","isOpponentPiece","length","sum","handleMove","async","toRow","toCol","response","fetch","concat","gameId","method","headers","Content-Type","body","JSON","stringify","fromRow","fromCol","ok","Error","updatedGame","json","Math","abs","additionalJumps","filter","move","winner","checkWinner","redPieces","blackPieces","red","black","_objectSpread","status","error","React","createElement","className","style","padding","textAlign","fontSize","marginBottom","fontWeight","charAt","slice","currentPlayer","display","border","backgroundColor","map","rowIndex","key","colIndex","isSelected","isValidMove","some","onClick","handleSquareClick","width","height","justifyContent","alignItems","cursor","position","boxSizing","borderRadius","boxShadow","top","left","transform","marginTop","Accept","mode","data","newGame","parse","alert","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2IAwbeA,MAhaf,WACE,MAAOC,EAAMC,GAAWC,mBAA2B,OAC5CC,EAAgBC,GAAqBF,mBAAwB,OAC7DG,EAAYC,GAAiBJ,mBAAiB,KAC9CK,EAAcC,GAAmBN,mBAAwB,MAC1DO,EAAc,8DA+CdC,EAAeC,IACnB,IAAIC,EAAQ,EACZ,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChC,MAAMC,EAAY,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,MAAMH,GAAKC,GAC3BC,GAASA,EAAME,gBAAkBN,GACnCC,IAIN,OAAOA,GAcHM,EAAsBA,CAACL,EAAaC,KACxC,IAAKd,EAAM,MAAO,GAElB,MAAMe,EAAQf,EAAKgB,MAAMH,GAAKC,GAC9B,IAAKC,EAAO,MAAO,GAEnBI,QAAQC,IAAI,+BAAgC,CAC1CP,MACAC,MACAC,QACAM,OAAQN,IAAUA,EAAMO,cACxBC,eAAgBV,EAAMC,GAAO,IAAM,IAGrC,MAAMO,EAASN,IAAUA,EAAMO,cACzBE,EAAgB,GAGhBC,EAAuB,GACD,MAAxBV,EAAME,cACRQ,EAAWC,MAAM,GACgB,MAAxBX,EAAME,eACfQ,EAAWC,KAAK,GAEdL,IAEGI,EAAWE,UAAU,IAAIF,EAAWC,MAAM,GAC1CD,EAAWE,SAAS,IAAIF,EAAWC,KAAK,IAG/CP,QAAQC,IAAI,uBAAwBK,GAGpC,MAAMG,EAAgB,GACtB,IAAK,MAAMC,KAAUJ,EACnB,IAAK,MAAMK,IAAU,EAAE,EAAG,GAAI,KAAAC,EAC5B,MAAMC,EAAYnB,EAAMgB,EAClBI,EAAYnB,EAAMgB,EAClBI,EAASrB,EAAgB,EAATgB,EAChBM,EAASrB,EAAgB,EAATgB,EAUtB,GARAX,QAAQC,IAAI,iBAAkB,CAC5BgB,KAAM,CAAEvB,MAAKC,OACbuB,KAAM,CAAExB,IAAKmB,EAAWlB,IAAKmB,EAAWlB,MAAW,OAAJf,QAAI,IAAJA,OAAI,EAAkB,QAAlB+B,EAAJ/B,EAAMgB,MAAMgB,UAAU,IAAAD,OAAA,EAAtBA,EAAyBE,IACxEK,GAAI,CAAEzB,IAAKqB,EAAQpB,IAAKqB,GACxBZ,eAAgBW,EAASC,GAAU,IAAM,IAIvCD,EAAS,GAAKA,EAAS,GAAKC,EAAS,GAAKA,EAAS,EAAG,CACxDhB,QAAQC,IAAI,sBACZ,SAIF,MAAMmB,EAAkB,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,MAAMgB,GAAWC,GAC3C,IAAKM,EAAa,CAChBpB,QAAQC,IAAI,yBACZ,SAIF,GAAQ,OAAJpB,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,MAAMkB,GAAQC,GAAS,CAC/BhB,QAAQC,IAAI,2BACZ,SAGF,MAAMoB,EACqB,MAAxBzB,EAAME,eAAuD,MAA9BsB,EAAYtB,eACnB,MAAxBF,EAAME,eAAuD,MAA9BsB,EAAYtB,cAE9CE,QAAQC,IAAI,mBAAoB,CAC9BoB,kBACAjB,eAAgBW,EAASC,GAAU,IAAM,IAIvCK,IAAoBN,EAASC,GAAU,IAAM,IAC/CP,EAAMF,KAAK,CAAEb,IAAKqB,EAAQpB,IAAKqB,IAC/BhB,QAAQC,IAAI,oBAAqB,CAAEP,IAAKqB,EAAQpB,IAAKqB,KAM3D,GAAIP,EAAMa,OAAS,EAEjB,OADAtB,QAAQC,IAAI,yBAA0BQ,GAC/BA,EAIT,IAAK,MAAMC,KAAUJ,EACnB,IAAK,MAAMK,IAAU,EAAE,EAAG,GAAI,CAC5B,MAAMI,EAASrB,EAAMgB,EACfM,EAASrB,EAAMgB,EASrB,GAPAX,QAAQC,IAAI,yBAA0B,CACpCgB,KAAM,CAAEvB,MAAKC,OACbwB,GAAI,CAAEzB,IAAKqB,EAAQpB,IAAKqB,GACxBZ,eAAgBW,EAASC,GAAU,IAAM,IAIvCD,EAAS,GAAKA,EAAS,GAAKC,EAAS,GAAKA,EAAS,EAAG,CACxDhB,QAAQC,IAAI,sBACZ,SAIF,GAAQ,OAAJpB,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,MAAMkB,GAAQC,GAAS,CAC/BhB,QAAQC,IAAI,+BACZ,SAIF,MAAMG,GAAiBW,EAASC,GAAU,IAAM,EAChDhB,QAAQC,IAAI,sBAAuB,CACjCc,SACAC,SACAO,IAAKR,EAASC,EACdZ,kBAGEA,GACFC,EAAME,KAAK,CAAEb,IAAKqB,EAAQpB,IAAKqB,IAC/BhB,QAAQC,IAAI,oBAAqB,CAAEP,IAAKqB,EAAQpB,IAAKqB,KAErDhB,QAAQC,IAAI,sBAMlB,OADAD,QAAQC,IAAI,qBAAsBI,GAC3BA,GAkCHmB,EAAaC,MAAOC,EAAeC,KACvC,GAAK3C,GAAmBH,EAExB,IACE,MAAM+C,QAAiBC,MAAK,GAAAC,OAAIxC,EAAW,WAAAwC,OAAUjD,EAAKkD,QAAU,CAClEC,OAAQ,MACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,QAAStD,EAAeU,IACxB6C,QAASvD,EAAeW,IACxB+B,QACAC,YAIJ,IAAKC,EAASY,GACZ,MAAM,IAAIC,MAAM,uBAGlB,MAAMC,QAAoBd,EAASe,OAMnC,GALA7D,EAAQ4D,GAGgD,IAAzCE,KAAKC,IAAInB,EAAQ1C,EAAeU,KAEnC,CAEV,MAAMoD,EAAkB/C,EAAoB2B,EAAOC,GAAOoB,OAAOC,GAChC,IAA/BJ,KAAKC,IAAIG,EAAKtD,IAAMgC,IAGtB,GAAIoB,EAAgBxB,OAAS,EAAG,CAE9B,MAAMlC,EAAe,CACnBM,IAAKgC,EACL/B,IAAKgC,EACL/B,MAAOf,EAAKgB,MAAMb,EAAeU,KAAKV,EAAeW,MAKvD,OAHAV,EAAkBG,GAClBD,EAAc2D,QACdzD,EAAgBD,IAMpBH,EAAkB,MAClBE,EAAc,IACdE,EAAgB,MAGhB,MAAM4D,EAvOUC,MAClB,MAAMC,EAAY5D,EAAY,KACxB6D,EAAc7D,EAAY,KAIhC,OAFAS,QAAQC,IAAI,eAAgB,CAAEoD,IAAKF,EAAWG,MAAOF,IAEnC,IAAdD,EAAwB,QACR,IAAhBC,EAA0B,MACvB,MA+NUF,GACXD,GACFnE,EAAOyE,wBAAA,GACFb,GAAW,IACdc,OAAQ,WACRP,YAGJ,MAAOQ,GACPzD,QAAQyD,MAAM,qBAAsBA,KAIxC,OACEC,IAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,QAAS,OAAQC,UAAW,WACxDL,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,OAAKC,UAAU,cAAcC,MAAO,CAClCG,SAAU,QACVC,aAAc,OACdC,WAAY,OACZ1E,MAAwB,cAAb,OAAJX,QAAI,IAAJA,OAAI,EAAJA,EAAM2E,QAAwB,UAAY,YApThD3E,EAGe,aAAhBA,EAAK2E,QAAyB3E,EAAKoE,OACrC,eAAAnB,OAAsBjD,EAAKoE,OAAOkB,OAAO,GAAGhE,cAAgBtB,EAAKoE,OAAOmB,MAAM,GAAE,UAElF,iBAAAtC,OAAwBjD,EAAKwF,cAAcF,OAAO,GAAGhE,cAAgBtB,EAAKwF,cAAcD,MAAM,IALrF,sCAuTPV,IAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CACjCS,QAAS,eACTC,OAAQ,iBACRC,gBAAiB,SAEZ,OAAJ3F,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,MAAM4E,IAAI,CAAC/E,EAAKgF,IACrBhB,IAAAC,cAAA,OAAKgB,IAAKD,EAAUd,UAAU,YAAYC,MAAO,CAC/CS,QAAS,SAER5E,EAAI+E,IAAI,CAAC7E,EAAOgF,KACf,MAAMxE,GAAiBsE,EAAWE,GAAY,IAAM,EAC9CC,GAA2B,OAAd7F,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,OAAQgF,IAA0B,OAAd1F,QAAc,IAAdA,OAAc,EAAdA,EAAgBW,OAAQiF,EACzEE,EAAc5F,EAAW6F,KAAK/B,GAAQA,EAAKtD,MAAQgF,GAAY1B,EAAKrD,MAAQiF,GAElF,OACElB,IAAAC,cAAA,OACEgB,IAAKC,EACLI,QAASA,IA7HCC,EAACvF,EAAaC,KACtC,IAAKd,EAAM,OAEX,MAAMe,EAAQf,EAAKgB,MAAMH,GAAKC,GAK9B,GAJAK,QAAQC,IAAI,kBAAmB,CAAEP,MAAKC,MAAKC,UAC3CI,QAAQC,IAAI,cAAe,CAAEoE,cAAexF,EAAKwF,cAAerF,iBAAgBE,gBAG5EE,GAAiBM,IAAQN,EAAaM,KAAOC,IAAQP,EAAaO,MAAa,OAALC,QAAK,IAALA,OAAK,EAALA,EAAOE,iBAAkBjB,EAAKwF,cAAc,GAM1H,GAAIzE,GAASA,EAAME,gBAAkBjB,EAAKwF,cAAc,GAAI,CAC1DpF,EAAkB,CAAES,MAAKC,MAAKC,UAC9B,MAAMS,EAAQN,EAAoBL,EAAKC,GACvCR,EAAckB,GACdL,QAAQC,IAAI,0BAA2BI,QAGhCrB,GAAkBE,EAAW6F,KAAK/B,GAAQA,EAAKtD,MAAQA,GAAOsD,EAAKrD,MAAQA,GAClF6B,EAAW9B,EAAKC,IAIhBV,EAAkB,MAClBE,EAAc,UAlBda,QAAQC,IAAI,oCAAqCb,IAoHtB6F,CAAkBP,EAAUE,GAC3Cf,MAAO,CACLqB,MAAO,OACPC,OAAQ,OACRX,gBAAiBpE,EAAgB,OAAS,OAC1CmE,OAAQM,EAAa,mBAAqB,iBAC1CP,QAAS,OACTc,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UACRC,SAAU,WACVC,UAAW,eAGZ5F,GACC8D,IAAAC,cAAA,OAAKE,MAAO,CACVqB,MAAO,MACPC,OAAQ,MACRM,aAAc,MACdjB,gBAAyC,MAAxB5E,EAAME,cAAwB,UAAY,OAC3DyE,OAAQ,iBACRmB,UAAW,2BACXH,SAAU,aAET3F,IAAUA,EAAMO,eACfuD,IAAAC,cAAA,OAAKE,MAAO,CACV0B,SAAU,WACVI,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXrG,MAA+B,MAAxBI,EAAME,cAAwB,UAAY,OACjDkE,SAAU,SACT,WAMRc,GACCpB,IAAAC,cAAA,OAAKE,MAAO,CACV0B,SAAU,WACVL,MAAO,OACPC,OAAQ,OACRM,aAAc,MACdjB,gBAAiB,uBACjBD,OAAQ,0CASxBb,IAAAC,cAAA,OAAKE,MAAO,CACVS,QAAS,OACTc,eAAgB,SAChBU,UAAW,SAEXpC,IAAAC,cAAA,UACEqB,QA5XcvD,UACpB,IACE,MAAMG,QAAiBC,MAAK,GAAAC,OAAIxC,EAAW,UAAU,CACnD0C,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB6D,OAAU,oBAEZC,KAAM,SAGR,IAAKpE,EAASY,GACZ,MAAM,IAAIC,MAAM,yBAGlB,MAAMwD,QAAarE,EAASe,OAG5B,GAFA3C,QAAQC,IAAI,gBAAiBgG,GAET,kBAATA,EAAmB,CAC5B,MAAMC,EAAU9D,KAAK+D,MAAMF,GAC3BjG,QAAQC,IAAI,yBAA0BiG,GACtCpH,EAAQoH,QAERlG,QAAQC,IAAI,+BAAgCgG,GAC5CnH,EAAQmH,GAGVhH,EAAkB,MAClBE,EAAc,IACd,MAAOsE,GACPzD,QAAQyD,MAAM,uBAAwBA,GACtC2C,MAAM,kDA8VFvC,MAAO,CACLC,QAAS,YACTE,SAAU,QACVQ,gBAAiB,UACjBhF,MAAO,QACP+E,OAAQ,OACRkB,aAAc,MACdH,OAAQ,UACRrB,aAAc,SAGdpF,EAAoC,aAAhBA,EAAK2E,OAAwB,aAAe,eAAzD,eC7aN6C,IAASC,WACpBC,SAASC,eAAe,SAGrBC,OACH/C,IAAAC,cAACD,IAAMgD,WAAU,KACfhD,IAAAC,cAAC/E,EAAG","file":"static/js/main.7ed604e8.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface GameState {\n  gameId: string;\n  board: string[][];\n  currentPlayer: 'red' | 'black';\n  status: 'active' | 'finished';\n  winner?: string;\n  createdAt: string;\n  updatedAt: string;\n  hasMoreJumps?: boolean;\n}\n\ninterface Square {\n  row: number;\n  col: number;\n  piece: string;\n}\n\ninterface Move {\n  row: number;\n  col: number;\n}\n\nfunction App() {\n  const [game, setGame] = useState<GameState | null>(null);\n  const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\n  const [jumpingPiece, setJumpingPiece] = useState<Square | null>(null);\n  const apiEndpoint = 'https://w9cqnnyhbi.execute-api.us-east-1.amazonaws.com/prod';\n\n  const getGameStatus = () => {\n    if (!game) {\n      return \"Click 'New Game' to start playing!\";\n    }\n    if (game.status === 'finished' && game.winner) {\n      return `Game Over - ${game.winner.charAt(0).toUpperCase() + game.winner.slice(1)} Wins!`;\n    }\n    return `Current Turn: ${game.currentPlayer.charAt(0).toUpperCase() + game.currentPlayer.slice(1)}`;\n  };\n\n  const createNewGame = async () => {\n    try {\n      const response = await fetch(`${apiEndpoint}/games`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        mode: 'cors'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create game');\n      }\n\n      const data = await response.json();\n      console.log('API Response:', data);\n      \n      if (typeof data === 'string') {\n        const newGame = JSON.parse(data);\n        console.log('Parsed new game state:', newGame);\n        setGame(newGame);\n      } else {\n        console.log('Setting game state directly:', data);\n        setGame(data);\n      }\n      \n      setSelectedSquare(null);\n      setValidMoves([]);\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Failed to create new game. Please try again.');\n    }\n  };\n\n  const countPieces = (color: 'r' | 'b'): number => {\n    let count = 0;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = game?.board[row][col];\n        if (piece && piece.toLowerCase() === color) {\n          count++;\n        }\n      }\n    }\n    return count;\n  };\n\n  const checkWinner = (): string | null => {\n    const redPieces = countPieces('r');\n    const blackPieces = countPieces('b');\n\n    console.log('Piece count:', { red: redPieces, black: blackPieces });\n\n    if (redPieces === 0) return 'black';\n    if (blackPieces === 0) return 'red';\n    return null;\n  };\n\n  const calculateValidMoves = (row: number, col: number): Move[] => {\n    if (!game) return [];\n    \n    const piece = game.board[row][col];\n    if (!piece) return [];\n\n    console.log('Calculating moves for piece:', {\n      row,\n      col,\n      piece,\n      isKing: piece === piece.toUpperCase(),\n      isBlackSquare: (row + col) % 2 === 0\n    });\n    \n    const isKing = piece === piece.toUpperCase();\n    const moves: Move[] = [];\n\n    // Determine valid directions based on piece type and color\n    const directions: number[] = [];\n    if (piece.toLowerCase() === 'r') {\n      directions.push(-1); // Red pieces move up\n    } else if (piece.toLowerCase() === 'b') {\n      directions.push(1);  // Black pieces move down\n    }\n    if (isKing) {\n      // Kings can move both up and down\n      if (!directions.includes(-1)) directions.push(-1);\n      if (!directions.includes(1)) directions.push(1);\n    }\n\n    console.log('Movement directions:', directions);\n\n    // First check for jumps (these are mandatory)\n    const jumps: Move[] = [];\n    for (const rowDir of directions) {\n      for (const colDir of [-1, 1]) { // Left and right\n        const jumpedRow = row + rowDir;\n        const jumpedCol = col + colDir;\n        const newRow = row + (rowDir * 2);\n        const newCol = col + (colDir * 2);\n\n        console.log('Checking jump:', {\n          from: { row, col },\n          over: { row: jumpedRow, col: jumpedCol, piece: game?.board[jumpedRow]?.[jumpedCol] },\n          to: { row: newRow, col: newCol },\n          isBlackSquare: (newRow + newCol) % 2 === 0\n        });\n\n        // Check if jump is within bounds\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\n          console.log('Jump out of bounds');\n          continue;\n        }\n        \n        // Check if there's an opponent's piece to jump over\n        const jumpedPiece = game?.board[jumpedRow][jumpedCol];\n        if (!jumpedPiece) {\n          console.log('No piece to jump over');\n          continue;\n        }\n        \n        // Check if landing square is empty\n        if (game?.board[newRow][newCol]) {\n          console.log('Landing square occupied');\n          continue;\n        }\n        \n        const isOpponentPiece = \n          (piece.toLowerCase() === 'r' && jumpedPiece.toLowerCase() === 'b') ||\n          (piece.toLowerCase() === 'b' && jumpedPiece.toLowerCase() === 'r');\n\n        console.log('Jump validation:', {\n          isOpponentPiece,\n          isBlackSquare: (newRow + newCol) % 2 === 0\n        });\n\n        // Only allow jumps over opponent's pieces to black squares\n        if (isOpponentPiece && (newRow + newCol) % 2 === 0) {\n          jumps.push({ row: newRow, col: newCol });\n          console.log('Valid jump found:', { row: newRow, col: newCol });\n        }\n      }\n    }\n\n    // If there are jumps available, they are mandatory\n    if (jumps.length > 0) {\n      console.log('Mandatory jumps found:', jumps);\n      return jumps;\n    }\n\n    // If no jumps are available, check for regular moves\n    for (const rowDir of directions) {\n      for (const colDir of [-1, 1]) { // Left and right\n        const newRow = row + rowDir;\n        const newCol = col + colDir;\n\n        console.log('Checking regular move:', {\n          from: { row, col },\n          to: { row: newRow, col: newCol },\n          isBlackSquare: (newRow + newCol) % 2 === 0\n        });\n\n        // Check if move is within bounds\n        if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) {\n          console.log('Move out of bounds');\n          continue;\n        }\n        \n        // Check if destination square is empty\n        if (game?.board[newRow][newCol]) {\n          console.log('Destination square occupied');\n          continue;\n        }\n\n        // Only allow moves to black squares\n        const isBlackSquare = (newRow + newCol) % 2 === 0;\n        console.log('Square color check:', {\n          newRow,\n          newCol,\n          sum: newRow + newCol,\n          isBlackSquare\n        });\n\n        if (isBlackSquare) {\n          moves.push({ row: newRow, col: newCol });\n          console.log('Valid move found:', { row: newRow, col: newCol });\n        } else {\n          console.log('Not a black square');\n        }\n      }\n    }\n\n    console.log('Final valid moves:', moves);\n    return moves;\n  };\n\n  const handleSquareClick = (row: number, col: number) => {\n    if (!game) return;\n\n    const piece = game.board[row][col];\n    console.log('Clicked square:', { row, col, piece });\n    console.log('Game state:', { currentPlayer: game.currentPlayer, selectedSquare, validMoves });\n\n    // If there's a jumping piece, only allow that piece to move\n    if (jumpingPiece && (row !== jumpingPiece.row || col !== jumpingPiece.col) && piece?.toLowerCase() === game.currentPlayer[0]) {\n      console.log('Must continue jump with piece at:', jumpingPiece);\n      return;\n    }\n\n    // If it's a piece of the current player's color\n    if (piece && piece.toLowerCase() === game.currentPlayer[0]) {\n      setSelectedSquare({ row, col, piece });\n      const moves = calculateValidMoves(row, col);\n      setValidMoves(moves);\n      console.log('Calculated valid moves:', moves);\n    }\n    // If it's a valid move for the selected piece\n    else if (selectedSquare && validMoves.some(move => move.row === row && move.col === col)) {\n      handleMove(row, col);\n    }\n    // Deselect if clicking elsewhere\n    else {\n      setSelectedSquare(null);\n      setValidMoves([]);\n    }\n  };\n\n  const handleMove = async (toRow: number, toCol: number) => {\n    if (!selectedSquare || !game) return;\n\n    try {\n      const response = await fetch(`${apiEndpoint}/games/${game.gameId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fromRow: selectedSquare.row,\n          fromCol: selectedSquare.col,\n          toRow,\n          toCol\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to make move');\n      }\n\n      const updatedGame = await response.json();\n      setGame(updatedGame);\n\n      // Check if this was a jump move\n      const isJump = Math.abs(toRow - selectedSquare.row) === 2;\n\n      if (isJump) {\n        // Check for additional jumps from the new position\n        const additionalJumps = calculateValidMoves(toRow, toCol).filter(move => \n          Math.abs(move.row - toRow) === 2\n        );\n\n        if (additionalJumps.length > 0) {\n          // If there are more jumps available, keep the piece selected\n          const jumpingPiece = { \n            row: toRow, \n            col: toCol, \n            piece: game.board[selectedSquare.row][selectedSquare.col] \n          };\n          setSelectedSquare(jumpingPiece);\n          setValidMoves(additionalJumps);\n          setJumpingPiece(jumpingPiece);\n          return;\n        }\n      }\n\n      // If no additional jumps or not a jump move, clear selection\n      setSelectedSquare(null);\n      setValidMoves([]);\n      setJumpingPiece(null);\n\n      // Check for winner after move\n      const winner = checkWinner();\n      if (winner) {\n        setGame({\n          ...updatedGame,\n          status: 'finished',\n          winner\n        });\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: '20px', textAlign: 'center' }}>\n      <h1>Checkers Game</h1>\n      <div className=\"game-status\" style={{ \n        fontSize: '1.5em', \n        marginBottom: '20px',\n        fontWeight: 'bold',\n        color: game?.status === 'finished' ? '#4CAF50' : '#2196F3'\n      }}>\n        {getGameStatus()}\n      </div>\n      <div className=\"game-board\" style={{\n        display: 'inline-block',\n        border: '2px solid #333',\n        backgroundColor: '#fff'\n      }}>\n        {game?.board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"board-row\" style={{\n            display: 'flex'\n          }}>\n            {row.map((piece, colIndex) => {\n              const isBlackSquare = (rowIndex + colIndex) % 2 === 0;\n              const isSelected = selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex;\n              const isValidMove = validMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              \n              return (\n                <div\n                  key={colIndex}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  style={{\n                    width: '60px',\n                    height: '60px',\n                    backgroundColor: isBlackSquare ? '#666' : '#fff',\n                    border: isSelected ? '3px solid yellow' : '1px solid #999',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    cursor: 'pointer',\n                    position: 'relative',\n                    boxSizing: 'border-box'\n                  }}\n                >\n                  {piece && (\n                    <div style={{\n                      width: '80%',\n                      height: '80%',\n                      borderRadius: '50%',\n                      backgroundColor: piece.toLowerCase() === 'r' ? '#ff4444' : '#333',\n                      border: '2px solid #fff',\n                      boxShadow: '0 0 10px rgba(0,0,0,0.3)',\n                      position: 'relative'\n                    }}>\n                      {piece === piece.toUpperCase() && (\n                        <div style={{\n                          position: 'absolute',\n                          top: '50%',\n                          left: '50%',\n                          transform: 'translate(-50%, -50%)',\n                          color: piece.toLowerCase() === 'r' ? '#ffcccc' : '#666',\n                          fontSize: '24px'\n                        }}>\n                          ♔\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  {isValidMove && (\n                    <div style={{\n                      position: 'absolute',\n                      width: '20px',\n                      height: '20px',\n                      borderRadius: '50%',\n                      backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                      border: '2px solid rgba(0, 255, 0, 0.8)'\n                    }} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '20px'\n      }}>\n        <button\n          onClick={createNewGame}\n          style={{\n            padding: '10px 20px',\n            fontSize: '1.2em',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer',\n            marginBottom: '20px'\n          }}\n        >\n          {!game ? 'New Game' : game.status === 'finished' ? 'Play Again' : 'Restart Game'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}